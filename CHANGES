phpQLAdmin 2.1 Change Log

phpQLAdmin 2.1.3 Release (Jan 20 2005)
	Bug fixes
	  - More (surprised!? :) deglobalization. And, actually a globalization - use of
	    '$_REQUEST["orgname"]' instead of '$orgname' in 'domain_edit_attributes.php'.
	  - Fix the ACI generation when adding/deleting/modifying a 'administrator' attribute
	    + Make sure we don't have duplicate access-id entries.
	  - Die just after forwarding to main page and just before a successful 'administrator'
	    change have been done - in case the .DEBUG_ME file exists that is.
	  - Remove hardcoded 'cn=<MailHostFQDN>' from 'control_del.php'. Use pql_get_define()
	    to get the attribute ('cn' in most cases, but you never know :).
	  - Make sure we try to delete the correct mailhost DN. In some cases, "oldmx"
	    IS known, and in others it's "mxhost"...
	    + Cleanup the MSG/URL redirect after a successful delete.
	  - When retreiving a 'dNSTTL=xxx+relativeDomainName=@' object, that last part can
	    NOT be left URL decoded - the '+' is removed, and we can't have that. It must be
	    there (it's part of the DN!). Recreate that last part, adding the missing character.
	  - I managed to get an empty OpenLDAPaci value (probably because of an earlier
	    bug in phpQLAdmin) in the database. Make sure we go through ALL values, EVEN if the
	    first one is empty/undefined (use count() and loop through).
	  - URL decode the server RDN before exploading DN (in websrv_edit_attributes.php).
	  - Don't overwrite the $url array (it contain urlencoded versions of rootdn/domain).
	  - URL decode DN in pql_write_mod().

	GUI layout change
	  - Only show the delete icon/url in the domain_details-websrv.inc page if there
	    IS a value to delete.

	Misc changes	
	  - Don't depend on 'php4-gd'. It's way to ancient to be usefull...
	  - Allow (Depends) 'apache-ssl' or 'apache2' in addition to 'apache' and 'httpd'.
	  - Recomend 'php4-idn'.
	  - Some (code) documentation updates.
	  - Add the file 'README.depends' which (very shortly) describes what's needed to get
	    phpQLAdmin working (software vice)...
	  - I've moved all schema files into the 'schemas' sub directory, all shell and perl
	    script examples into the sub directory 'scripts', all README* files down to the
	    'doc' sub directory and; finaly, all java-, CSS- and misc PHP files down to tools.
	    This to remove some clutter from the main directory...
	    NOTE: I've done that on the cvs server level, so there's no commit logs that
		  indicate this. I did this so that I don't lose the logs (the only way to
		  move a file in cvs is to remove it and then add it in the new location -
		  you'll lose ALL logs when it's removed!).

	Schema changes
	  - Three new attributes for the phpQLAdminWebSrv object class:
	    webLDAPServer           1.3.6.1.4.1.8767.3.2.5.12
	    webLDAPServerLoginDN    1.3.6.1.4.1.8767.3.2.5.13
	    webLDAPServerLoginPW    1.3.6.1.4.1.8767.3.2.5.14

phpQLAdmin 2.1.2 Release (Nov 17 2004)
	Bug fixes
	  - De-globalization (in a LOT of places, to numeros to name!)
	  - The whole thing that deals with cloning a QmailLDAP/Control object was faulty.
	    It was never a FULL clone, just some 'randomly' choosen attributes (the ones
	    I've choosen to extract from the object to clone). Instead retreive the WHOLE
	    object, go through attributes and their value(s) and add the ones needed/wanted
	    to the resulting array.
	  - When cloning a QmailLDAP/Control object and 'include {locals,rcptHosts}' was
	    choosen AND if locals/rcptHosts contain the FQDN of the cloned server, replace
	    that with the FQDN of the new server.
	  - Fix config_ldap.php->LDAP Server Configuration->LDAP Object classes. Now folds
	    and unfolds the correct rows.
	  - Fix and improve ACI generation and deletion. Now works better than ever
	    thanx to include/attrib.{aci,administrator,modrdn}.inc rewrite.
	  - Better support for old AND new style quota (at the same time).
	  - Allow for multiple A/CNAME records in the DNS manager.
	  - Make sure that the attribute we're using to reference users is retreived 
	    (in the main 'retreival' section at the top). Just in case it isn't, we do
	    it manually after all other values are retreived. If it isn't in the object,
	    then we show a message that that's the case...
            Closes bug 220.
	  - More clever checking if {home,mail} directory is set or not (and auto generation
	    if it isn't) . Some duplication of code removed...
	  - Correctly ADD a new {user,branch}ObjectClass or passWordSchemes to existing
	    values. Previosly overwrote (randomly) the previous value.
	  - Allow for deleting the last of the 'passWordScheme', '{user,domain}ObjectClass'
	    attributes...
	    Closes bug 213.
	  - Simplified and rewrite of showing QmailLDAP/Control frame or not.
	  - Parse error(s) fixed
	    Closes bug 214.
	  - _SESSION[ADVANCED_MODE] isn't always known. If not, try _REQUEST[advanced].
	  - If defaultquota{size,count} is unset, we set it to '0', so that the check
	    after LDAP attribute retreival(s) is complete.

	API changes
	  - Removed the following functions because pql_search.inc:pql_search() can
	    do the same job (with some modifications):
	    + pql_search.inc:pql_get_dn()
	      This was later readded again, but completley rewritten to replace
	      pql.inc:pql_user_get() (using the new pql_search.inc:pql_search()).
	    + pql_search.inc:pql_get_object()
	    + pql.inc:pql_user_get()
	      Moved the referral chasing to pql_search.inc:pql_search().
	    + pql.inc:pql_domain_exist()
	    + pql.inc:pql_user_exist()
	    + pql.inc:pql_domain_get_value()
	      NOTE: This unfortunatly made changes to 'include/config.inc.CHANGE_ME'!
	    + pql.inc:pql_domain_get_branchdn()
	    + pql.inc:pql_domain_get_subdomains()
	    + pql_control.inc:pql_control_get_attribute()
	    + pql_control.inc:pql_control_get_hosts()
	    + pql_control.inc:pql_control_search_attribute()
	    + pql_units.inc:pql_unit_exist()
	    + pql_websrv.inc:pql_websrv_get_servers()
	  - Removed the following functions because the new pql_write.inc:pql_modify_attribute()
	    can/is doing the same job (with some modifications).
	    + pql.inc:pql_replace_attribute()
	    + pql.inc:pql_domain_set_value()
	    + pql_bind9.inc:pql_bind9_set_record()
	    + pql_pql_websrv.inc:pql_websrv_set_record()
	    + pql_control.inc:pql_control_replace_attribute()
	    + pql_control.inc:pql_control_remove_whole_attribute()
	    + pql_control.inc:pql_control_remove_attribute()
	    + pql_control.inc:pql_control_add_attribute()
	    + Replaced a bunch of calls to pql_control_update_domains() (function still
	      exists - it does a slightly different job).
	  - Moved the following functions from pql.inc to pql_search.inc (and modified
	    or rewrote it in the process):
	    + pql_search_forwarders()
	    + pql_email_exists()
	    + pql_validate_administrator()
	      - Rewrite - sligth change in param, added the attribute option so that
	        we can check any other attribute than the 'administrator' (there's also
	        the controlAdministrator and ezmlmAdministrator)...
	      - Verifying what type (if at all) of administrator a user is is done
	        in two steps for each root DN instead of one big chunk at the end
	        (which was wrong anyway, since it checked the LAST root DN etc).
	        A QmailLDAP/Control administrator can be located in two (three) places.
	        1. In the root DN - administrator. If user is super admin, then he/she is
	           also a QmailLDAP/Control administrator.
	        2. In the root DN - controlAdministrator. (hm, I think that's a bug).
	        3. In the Control DN object - controlAdministrator. (I think this is
	           the correct place where that attribute should/can be).
	    + pql_domain_get()
	      - Renamed to pql_get_domains() after rewrite/modifications.
	      - Duplication of code removed - tried to 'find domains/branches below
	        the top dn' twice. When getting domains, if the user subtree (ou=People
	        for example) is defined and exists, we try to do a ONELEVEL search for
	        more domains/branches there.
	        After this, we look for branches in a ONELEVEL below the root DN. Bigger
	        chance of actually getting all domains and/or branches...
	    + pql_get_subschema()
	    + pql_get_subschemas()
	    + pql_get_rootdn()
	    + pql_split_oldvalues()
	  - Move pql_search.inc:pql_uniq() to pql_formating:pql_uniq().
	  - pql.inc:pql_domain_exist() should be called with the link id, not the
	    whole ldap object!
	  - Renamed the function pql.inc:pql_domain_replace_admins() to
	    pql_write.inc:pql_replace_values() and reflect the change (no references
	    to admin attributes in the function).
	  - Moved the following functions from pql.inc to pql_write.inc:
	    + pql_user_add()
	    + pql_user_del()
	    + pql_domain_add()
	    + pql_domain_del()
	  - Moved the following functions from pql.inc to pql_formating.inc:
	    + pql_generate_button()
	    + pql_strip_domain()
	    + pql_strip_username()
	  - Renamed the function pql.inc:pql_modify_userattribute() to
	    pql_write.inc:pql_modify_attribute().
	    + Use the new pql_write.inc:pql_write_mod() function instead of duplicating
	      the LDAP modification/write part.
	  - Create a new CORE function: pql_write_add(). It supersedes the following
	    functions (with some small adjustments):
	    + pql_user_add() - now a 'wrapper' for pql_write_add(). It's still to
	      specialized to remove completely. Changes to pql_user_add():
	      - Change the third param from 'cn' to 'dn' - the RDN of the user object
	        to be added.
	      - If it's not a group object being added (i.e. must be a user), extract
	        the object classes to use from the PQL_CONF_OBJECTCLASS_USER define.
	        BUG: If creating a 'mail' account, and the object class is either
	        'krb5principal' or 'trustaccount', then don't add those object
	        classes. This bug should be fixed when pql_validate_object() works correctly.
	      - Don't generate the user RDN here, it's now done in the tables/user_add-save.inc
	        file (just before calling pql_user_add()).
	    + Deleted pql_domain_add(). This lead to the following changes in domain_add.php:
	      - Create the 'LDIF' before adding object. This means that it makes more sence
	        of adding all the 'additional' branch attributes ('defaultDomain', 'baseHomeDir'
	        and 'baseMailDir') directly, instead of adding the core object and THEN do
	        a modify... Should be quicker this way.
	      - Instead of just adding the creator as administrator of the domain, add all
	        the super admins.
	      - Slightly change the way pql_unit_add() is called. Call it with the dn we
	        just created (the FQDN of the branch/domain) instead of just $_REQUEST["domain"]
	        (which only contain the branch /name/ not a RDN). Also, call it directly
	        with the DN of a subtree, not just the /name/ of the subtree.
	      - Don't reference defaultQuota - I never specify that any where..
	      - If we're debuging, don't redirect - die with message what we WOULD have done.
	    + pql_unit_add() - now a 'wrapper' as well.
	    + pql_websrv_add_server() - now a 'wrapper' as well.
	  - Create a new function: pql_validate_object(). Most of this comes from
	    include/pql_write.inc:pql_user_add(), but it's better suited in a separate
	    function (it's now used by the pql_write_add() function).
	  - Rewrite parts of pql_get_attribute() - now return as flat array/value as
	    possible, not ALWAYS an array... This lead to a whole bunch of 'de-arraifying'.
	  - It was possible for pql_split_oldvalues() to be called with empty option. Catch
	    that by returning false...
	  - A lot of pages used pql_validate_object(), pql_create_ldif() and/or
	    ldap_{add,modify}() etc. With the API rewrite, there's better suited functions
	    that can do this instead. Use them wherever possible.

	GUI layout change
	  - When finding user(s) in the search.php page, open any users found in a
	    new browser. This because we don't have all the information to be able
	    to link correctly in the main frame.
	  - Allow for changing an in-addr.arpa zone in the DNS manager.
	  - Make config details look like all the other - value to the left, edit
	    URL to the right.
	  - Simplify the generation of a webserver object - allow for creating DNS zone
	    and host object.
	  - The table row that showed the 'Minimum GID Number to be used for shell and
	    system accounts' (in the config details/branch page) managed to get BEFORE
	    the actual value retrieval resulting in an empty value being shown!
	  - Draw a thicker border around the frames, so that it's easier to resize
	    them in Mozilla (there's a bug in earlier Mozilla's).
	  - Generate a quota string to be shown in tables/control_details-base.inc.
	  - Duplication of information: 'Create <type> in domain <domain> - <TYPE> account'.
	    No need for <type> (use only the <TYPE> value).

	Misc changes	
	  - Better debugging support. Don't die as soon as possible just because the
	    .DEUG_ME file exists. Try to 'complete the mission' - create 'LDIF's for
	    the whole task, not just the first object.
	  - Lots of code duplication removed - use pql_format_table_single() all
	    over the place.
	    + pql_format_table_single() was trying to get an attribute for a object.
	      If it's not a DN (such as it isn't when called in config_details.php),
	      we got strange messages in the syslog (running slapd with some form of
	      debugging).
	    + In pql_format_table_single(), we must set username to the value we're
	      called with if it's not a DN. Othervise we're shown a empty line.

	Schema changes
	  - The attribute 'minimumGIDNumber' wasn't added as a MAY in the 'phpQLAdminConfig'
	    object class definition.

phpQLAdmin 2.1.1 Release (Oct 16 2004)
	Bug fixes
	  - Don't create a new connection to the LDAP db in files located in '.'.
	    This is done sufficently in pql_config.inc
	  - lots and lots of variable de-globalization.
	  - If the function mhash() isn't availible AND we're about to generate
	    a {MD5} (in pql_password_hash()) password, we can't do this. Fall back
	    to using CRYPT. Everything should still work, just not as secure...
	    + Log this error using error_log()...
	  - Include uidNumber, gidNumber and homeDirectory even if we shouldn't
	    do this. When we're using 'posixAccount' that is..
	  - When saving the user (from tables/user_add-save.inc), we should get
	    a free {User,Group}ID if: It's NOT an mail account OR: we're using
	    posixAccount when creating user(s) AND we have a 'forwarding account
	    uid number for this branch.
	  - There's a lot of stuff that isn't used if we're not referencing users with
	    'uid'. This is (partly?) wrong. Creating a user (anywhere!), requires some
	    stuff otherwise not added.
	    + Move stuff around to improve readability - huge rewrite.
	  - Change some PQL_ATTR_* stuff to PQL_CONF_*.
	    Closes bug #145
	  - Don't call pql_control_update_domains() (when creating domains) unless
	    PQL_CONF_CONTROL_USE is set.
	    Closes bug #164
	  - Make sure a trailing slash is added on mailstore and home directory, and.
	    replace all double slashes with one.
	  - Full support for new QmailLDAP delivery modes. Old format still supported
	    though. Use checkboxes instead of selects.
	  - URL Decode the surname and lastname values in the user/save page which
	    was/is encoded in tables/user_add-additional.inc.
	  - Cleanup and rewrite the email address creation. The mailAlternateAddress
	    must be set when creating a group object.
	  - Don't add deliveryMode automaticly. If we're running newer QmailLDAP, we
	    use different values than if running an older QmailLDAP...
	  - Only add mailMessageStore if we're adding a system, mail or group account
	    + Also make sure this contain a trailing slash (for Maildir creation)!
	    + Also add the homeDirectory attribute. This is moot in functionality
	      really, but if enforcing schema check we must have this.
	    + Hardcode the object classes needed - the base oc is 'qmailGroup', but
	      OpenLDAP version >2.2 REQUIRE one structural objectclass so we add the
	      'person' oc. But since we're coding the RDN with 'uid', we must also add
	      the 'posixAccount' (which is the reason why we add homeDirectory).
	  - Only add homeDirectory if we're adding a system account OR 'posixAccount' is
	    one of the object classes choosen for account creation.
	  - Spelling error fixed: s/user_generate_mailstore/user_generate_homedir/ in one
	    place...
	  - De-internationalize the 'gecos' value - international characters not allowed.
	  - Fail greacefully if there isn't a plugin for the attribute we're about to
	    modify.
	    + Put toghether the plugin file name outside of the 'include()' function in
	      the user_edit_attribute page.
	  - In case we have setup two LDAP server (for example 'localhost' and 'other'
	    in that order), and the first one (localhost) isn't availible, phpQLAdmin
	    will fail. This because code assumes that configuration is availible in
	    the FIRST LDAP server configured (if we haven't submitted the login form
	    that is).
	    This is naturaly not correct, because the second LDAP server might have a
	    whole different layout and setup... The solution is to NOT use _ANY_ LDAP
	    configuration (only the defaults). When we have submitted the login form,
	    then we have the LDAP host information, so then we can try to get the config
	    we need/want...
	    + Don't try to get languages supported from LDAP, if we don't have an LDAP
	      hostname.
	  - When trying to get the root DN a specific object is in, it IS possible that
	    we get more than one that matches. For example, looking for 
	    'uid=turbo,ou=People,o=Fredriksson,c=SE' there is FOUR (three in reality)
	    possibilities - 'ou=People,o=Fredriksson,c=SE', 'o=Fredriksson,c=SE' and
	    'c=SE' (the fourt is the object it self - it COULD happen, even though
	    higly unlikley). The true root DN is the one with the MOST number of DN
	    parts - count them, and take the DN with highest number.
	    + This should (hopfully) take care of most of the "This is weird ..."
	      messages.
	  - When verifying that we have object classes for all the attributes in the
	    object, and that those object classes all have their MUST rule(s) fullfilled
	    I checked if the attribute value was an array before I did the check. This
	    is void, since I'm not interessted in the value, only the attribute name.
	  - Don't use the user_generate_aci() function just because the session variable
	    'ACI_SUPPORT_ENABLED' is set. Check that the function actually exists as well!
	  - pql_control_get_attribute() does a BASE search, so we must include the
	    MX/mail host part in the base/search DN.

	EZMLM manager (re)write
	  - Additional option to list_forward() - list number. This is used so that
	    we can get to the LIST view instead of the 'domain lists view'.
	  - Domain value changed to 'rootdn' to correspond with rest of phpQLAdmin.
	  - Make sure we can add subscribers and 'rejected addresses'. This is done
	    via a 'submit' to the form.
	  - Only set defaults if we haven't 'reloaded' (such as when adding subscriber
	    or rejected address). In that case, make sure that the checkbox STAYS
	    checked!
	  - If we where successfull in creating list we subscribe subscribers, and
	    'kill subscribe' any rejected addresses.
	  - Remove duplicating code - ezmlm-list was called twice. Once to get number
	    of subscribers, and one to get addresses subscribed! Once should be enough!
	  - Get rejected addresses (availible in LIST/deny/).
	  - Don't execute the './sub_ezmlm_create.pl' script. No point!
	  - Allow to add '-k' to 'ezmlm-make'. This is used only if we're creating a
	    list and supplies 'rejected addresses'.
	  - Don't execute the ezmlm commands if DEBUG is set OR the file .DEBUG_ME exists.
	  - The ezmlm functions should not forward view (anywhere!). This should be
	    done by the calling page. This so that we could add subscribers (etc) at
	    the same time as list creation....
	  - Implement the functions 'subscribe_kill()' and 'unsubscribe_kill()' which
	    'subscribes' a user to the 'LIST/deny' - a systemwide kill file!
	  - Support view of 'rejected addresses' in the ezmlm details page. Slight
	    rewrite of HTML output.
          - Add more folding tags so that the whole {Private,Public} section can be
            folded/unfolded.
          - Move public variable initialization to the public section... Bah!
          - Make sure that errors from posix_getpwnam() doesn't interfere with the GUI.
          - If the Qmail Virtual User (by default 'alias') isn't found in the system
            database (/etc/passwd), then we'll try the Qmail virtual database (which
            is /var/qmail/users/assign). We need this so that we know where to put
            DOT files (man ezmlm-make => second option)
          - Remove all the tree structure HTML code. Use the 'old and trusted'
            pql_format_tree() and pql_format_tree_end() to create the HTML code
            instead. More versitale and works more like left.php.
          - Rearranging code, so we can get rid of multiple/similar 'if() {}'s.
            Code is more readable now.
          - Duplication code removed. Only get domains (and it's values) ONCE.
          - If we're 'super-admin', we should be allowed to create lists in ANY
            domain/branch.
          - IDNA decode any/all domain names.
          - De-globalization. Rewrite of left-ezmlm.php lead to CORRECT usage and
            inclution of the rootdn and domain values.
          - The EZMLM constructor no longer uses a global value. Get the 'ezmlmVirtualUser'
            from the branch object...

	GUI layout change
	  - Allow setting ldapGroup{Login,Password} attributes (availible in newer
	    QmailLDAP/Controls).
	  - If the attribute we use to reference users with isn't availible in any of
	    the object classes we've choosen to create users with, we die with a message.
	    The user creation will break, sooner than later!
	  - Allow for setting 'no local delivery' directly when creating a user (IF
	    we're running in advanced mode AND using new QmailLDAP).
	  - If there is no account expiration date, then say so in the table (instead
	    of 'xxx 1979').
	  - Support creation of account type 'group' (a 'micro mailinglist').
	    + Don't demand password for group accounts.
	  - A function (pql_format_table_single()) that will go through an array,
	    creating a nice table which looks good even if there zero, one or more
	    values.
	  - Support for changing togglable values directly (without going via a form).
	  - Show the images/mail image for mailinglists as well as users.
	  - Added option to keep old primary email address as an alias when deleting a
	    mail address.
	  - Show registered addresses in domain, sorted by tree below each user.
	    Possibility to view/change/delete the 'super administrators' in the branch
	    configuration as well as for each user. This makes it easier to see directly
	    who's a 'super admin'...
	  - If we haven't specified a global branch option to auto generate password,
	    we give the user/admin a chance to do this anyway with a checkbox.
	    + If we have specified to auto generate a password, we show it as the last
	      thing before creating the user. If we're running in advanced mode, we do
	      this at the same time as we ask for mail host (MX) and if not, we do it
	      in a separate page.
	  - I couldn't figure out a way to check java support in the browser, so instead
	    I check for the 'lynx' browser. If true, then we can toggle simple/advanced
	    mode by using a 'submit' button instead of an 'on{Change,Click}' which calls
	    a java function (this.form.submit())...
	  - Output the correct type of object that's being created from the user_add page
	    in the title of the page instead of hardcoded 'Create user in domain ...'.
	  - Support SpamAssassin configuration for each user in the LDAP database. This
	    is accomplished using the included 'schema' (actually only an attributeType
	    definition) included with SpamAssassin.
          - Rewrite the part that figures out if we should show the controls frame or
            not.
            + A 'super admin' should be able to manage the QmailLDAP/Controls information,
              even if he/she isn't a controls administrator.
            + Simplify - cyckle through the root DN's _once_ (not twice).
          - In the pql_control_replace_attribute() function, die and output an LDIF
            before doing the LDAP modification if the file ./.DEBUG_ME file exists.
          - The pql_control_replace_attribute() works in three ways: Try modification.
            If that fails, it tries to delete the attribute and if that works, add the
            new attribute. Previosly it died if it couldn't delete the value which
            is/was wrong.
          - Finish up some of the new QmailLDAP/Controls attributes.
	    Closes bug #199.
 
	Misc changes	
	  - Support the new/changed accountStatus value 'noaccess'. Only if NEW_STYLE_QUOTA
	    is set though, it's not availible in the LDAP server othervise...
	  - When creating a user, don't check the surname, name, mailMessageStore
	    or homeDirectory if that's not needed (because we haven't the corresponding
	    object class).
	  - We should care less what OBJECT CLASS is used when creating users, and more
	    the fact what ATTRIBUTE is availible (in these object classes). Hence,
	    don't use in_array(), but pql_check_attribute().
	  - The pql_missing_objectclasses() function was under the impression that
	    it's always a DOMAIN/BRANCH object that should be checked for missing object
	    classes. It isn't now, so pql_setup_branch_objectclasses() needs to be
	    called manually only when it's a domain/branch object that's being
	    added/modified.
	    + Also, the subschema entry isn't called 'objectclass' (used via a define),
	      but 'objectclasses'! This lead to the fact that no missing object classes
	      where processed.
	  - More notes for the user_generate_{mailstore,homedir}() functions.
	    + Simplify the functions to make then more easy to read.
	  - Exchange some '<?php echo ...' for the shorter '<?=...'.
	  - Rewrite (in two places of the function pql_domain_set_value()) of the part
	    that (tries to) makes sure that object classes are up-to-date with attribute
	    added/removed - a lot smarter.
	  - If we've specified to auto generate a password, we can't complain if
	    the password is empty. It (the auto genaration) is done as the last thing
	    before adding the user to the database.
	  - With OpenLDAP version >2.2, the cn=Monitor backend have changed. Attributes
	    that previosly was in 'description' etc, is now in 'monitoredInfo' etc.
	    This required some changes both in the backend functions such as pql_get_status()
	    and pql_get_status_databases() but also in the CALLING of those function.
	  - Getting the uptime was all wrong. I misstook the value for some kind of
	    UNIX time stamp, but it's not. And reporting the total amount of minutes
	    is rediculos, especially if the server have been up for days or weeks (months!).
	    Instead, use the (relativly) new function pql_format_timestamp_human()
	    that was specifically written for this change.
	    + The only problem with this rewrite is that OpenLDAP <2.2 is no longer
	      supported. At least not from the monitor/status point of view. Doesn't
	      matter that much, since 2.2.17 is now marked as stable, and <2.2 is marked
	      as ancient/dead...
	  - Make sure that ALL the super admins is included in the ACI's with full access
	    in all objects being created
	  - Cleanup the demo database files. Add better/newer ACI configuration, ACI
	    attributes in the objects etc.
	  - Generate a ZIP file when doing a release.

	API changes
	Schema changes:
	  - Added autoCreatePassWord (OID: 1.3.6.1.4.1.8767.3.2.1.16) for auto password
	    generation. To get it just after 'autoCreateMailAddress', the 'useWebSrv'
	    attribute was renumbered (+1 in OID number).
	  - Support for setting the default phpQLAdmin view mode (advanced/normal).
	    + This is done with a new attribute (OID: 1.3.6.1.4.1.8767.3.2.1.18) and a
	      new object class (OID: 1.3.6.1.4.1.8767.3.1.6) which have to be added to
	      the user object.
	    + Support getting user phpQLAdmin configuration (currently only the new
	      attribute, but future use can be seen) by getting the full user object,
	      looking for configuration 'defines' set in $PQL_ATTRIBUTE["USER"].
	    + Add the new attribute to the 'usertoggle' plugin for ease of db updates.
	    + Setting the default view mode is done in the user details page->Access.
	  - Support for setting 'ezmlmVirtualUser' in a branch object. This is a new
	    attribute (OID: 1.3.6.1.4.1.8767.3.2.2.18) - a MAY in phpQLAdminBranch.
	    + The EZMLM constructor no longer uses a global value. Get the 'ezmlmVirtualUser'
	      from the branch object...
	  - Additional argument (default user reference attribute) added to pql_get_dn().
	    This so that we can call it recursivly incase we don't have a user reference
	    attribute for some reason (i.e. we can't find the value in the LDAP server).
	    If this is the case, we default to 'uid' as reference, and if the user isn't
	    found with that, we call recursivly with 'cn' as reference... If that fails
	    as well -> return 'no such user'.
	  - Rename the function pql_password_generate() to pql_generate_password()
	    which is more in line with functions specified in include/config.inc.
	  - Replace the array_values(array_unique()) combo with the 'new' pql_uniq()
	    function.
	  - Update the qmailControl.schema file...

[all changelog for the 2.0 branch is removed - get a 2.0 version if you really must know]
