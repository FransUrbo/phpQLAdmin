Access control
==============
phpQLAdmin does not allow or disallow anything. All access control is
up to the 'backbone'. That is, the LDAP server, Kerberos KDC and AFS
protection database (pts) etc. If the user have write access to do
what is required, then fine. If not, the action will fail.

That is, it might SEEM (from the phpQLAdmin point of view) like the
user have access to create users, domains, mailinglists etc, but if
the 'backbone' doesn't grant the action, it will fail.

With this in mind, it is important that the correct access is given at
the 'backbone' - in the LDAP server, correct ACL lines must be given
etc.


There are however some sligt access control in phpQLAdmin. The issue
of what to show the user. Version 2.0 and newer of phpQLAdmin was
designed to be use by multiple administrators at an ISP or
similar. That is, there might be competing companies on the same
system, and we don't want them to be able to see (or even worse,
destroy for) each other, do we!? :)

That is why the LDAP database have had provisions for administrator
values. For example, I'm using the 'domain' system in my database (as
opposed to the 'organization' system), so I have in my dc object the
value

	administrator: DN OF ADMIN

The 'DN OF ADMIN' in my case is

	uid=turbo,ou=People,dc=fredriksson,dc=com

as in:

	dn: dc=com
	dc: com
	objectClass: domain
	objectClass: phpQLAdminBranch
	administrator: uid=turbo,ou=People,dc=fredriksson,dc=com

If using location layout, with common name as user references),
this would look like:

	dn: c=SE
	o: SE
	objectClass: country
	objectClass: phpQLAdminBranch
	administrator: cn=Turbo Fredriksson,ou=People,o=Fredriksson,c=SE

Without this attribute (administrator) and it's value (uid=turbo,ou=People,
dc=fredriksson,dc=com or cn=Turbo Fredriksson,ou=People,o=Fredriksson,c=SE),
I would not SEE the database when I login. Any user added to the base DN(s)
is considered 'super administrator' and have the right to create branches
etc. Administrators added to any sub branch, as in:

	dn: dc=fredriksson,dc=com
	dc: fredriksson
	objectClass: domain
	objectClass: phpQLAdminBranch
	administrator: uid=turbo,ou=People,dc=fredriksson,dc=com

is considered to be a 'branch administrator' and only have access to this
specific branch.

If the user logged in isn't listed in neither the base DN nor in the branch
object, he/she is no admin and only have access to his/her own object.

The 'administrator' attribute takes multiple values, so one can just use as
any attribute/value cominations as one feels necessary. Such as

	dn: dc=fredriksson,dc=com
	dc: fredriksson
	objectClass: domain
	objectClass: phpQLAdminBranch
	administrator: uid=turbo,ou=People,dc=fredriksson,dc=com
	administrator: uid=malin,ou=People,dc=sundqvist,dc=com
	administrator: uid=zicronix,ou=People,dc=winas,dc=com

All this is accessible through the web interface, but to do any modification
to the value, one first have to have access to the tree (see below). One
important note is that unnecessary spaces must be removed (compare
'ou=People, dc=winas' with 'ou=People,dc=winas').


If you already have a database you'd like to administrate through
phpQLAdmin, you will have to add this attribute (with corresponding
objectclass phpQLAdminBranch) before being able to administrate your
database. To do this, you must install the schema file 'phpQLAdmin.schema'
into your LDAP server (don't forget to include it as well and possibly
restart your LDAP server!).


In the file README, I said that it's up to the 'backbone' (in this
case the LDAP server) to dictate what users have access to. To allow
the domain/branch administrator to create users and groups etc, an ACL
directive like this need to be installed into the LDAP server:

	access to dn=".*?dc=com"
		by dnattr=administrator write
		by * read

Exchange 'dc=com' with your top DN (be it 'c=SE', 'dc=net' etc).

This will however not quite work if you have other ACL's that limit
what's readable/writable (ie, a restriction on the userPassword
attribute etc). For example, if your ACL list looks like this:

	access to attr=userPassword
		by dn="cn=qmail,ou=People,dc=fredriksson,dc=com" read
		by anonymous auth
		by self read
	
	access to dn=".*?dc=com"
		by dnattr=administrator write
		by dn="uid=turbo,ou=People,dc=fredriksson,dc=com" write
		by dn="uid=turbo.+\+realm=BAYOUR.COM" write
		by * read

this won't allow your to update the userPassword field, because that
ACL entry is BEFORE the 'access to (almost) everything' entry. On the
other hand, if the ACL entries is reversed, ANYONE will be able to
read the userPassword attribute (because of the 'by * read' in the
'access to (almost) everything' entry'...

So the solution is to add the 'by dn="..." write' lines in BOTH places.

Note though that bug 34 (which is now closed) in the phpQLAdmin bug
tracker talks about needing a double quote ("), not a singel quote (').
This seems like a OpenLDAP bug to me, so take this note for what it is,
one person having this trouble. It might very possibly be fixed by the
time you read this...

And this mean that any update on the 'administrator' value will have to
be incorporated in the LDAP server ACL's as well! Sucks, but that's the
way it is (currently). Using 'in LDAP' access control (ACI) will solve
much of the trouble in keeping the ACL updated when administrator (super
or branch) is changed. Please read the README.aci file for more on this.

Another problem with this is that it's not recursive. That is, it lets
modifications being done in the 'dc=fredriksson,dc=com' tree but not in
a suborganization such as 'ou=People,dc=fredriksson,dc=com' or
'ou=Groups,dc=fredriksson,dc=com'. To enable this, the 'administrator'
attribute have to be added there as well.


This ACL won't allow you to create domains/branches, so to be able
to do that, add the 'administrator' attribute to your top DN as well
(don't forget to add the objectclass 'phpQLAdminBranch'!).


A possibly better and recursive solution to the ACL issue is to use the
OpenLDAP ACL rule that reads (see slapd.access(5)):

            group[/<objectclass>[/<attrname>]]
                 [.<groupstyle>]=<group>

With this, we can create an ACL that looks something like this (for a
'super administrator'):

	access to dn.subtree="dc=com"
	        by group/phpQLAdminBranch/administrator.exact="dc=com" write
	        by * read

And similarly, for a domain administrator:

	access to dn.regex="(.+,)?ou=People,(dc=[^,]+,dc=[^,]+)$"
	        by group/phpQLAdminBranch/administrator.expand="$2" write
	        by * break

If you want/need both, just add them to your configuration in this order
(first the super admin, then the domain admin ACL), adding any restrictions
below this. That means, that if a domain admin logs in (to the DB), the
first ACL won't match, but the second one will, so any third, forth (etc)
ACL won't be queried...



If you like me is 'some kind of ISP' (hosting multiple domain or what
not) and you have layed out your LDAP tree according to the DOMAIN
layout, and where each branch (each dc object directly below the top
dc - dc=com in my case) is owned by different people, it would be nice
to have information about the owner of the branch (and be able to edit
this information!).

This is possible by using the objectClass 'dcOrganizationNameForm'
(RFC 2377, which can be found at http://rfc-2377.rfcindex.net/). It
allows storage of telephone number, Organization name, Postal address,
Postal code etc in the domain object.

If you want this, install the schema file 'rfc2377.schema' into your
LDAP server.


Anonymous read to attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Another issue with LDAP ACL's is that you _absolutly_ need anonymous
read to the 'namingContexts', 'subschemaSubentry', 'monitorContext'
and 'configContext' (if you're using the new config backend that came
with OpenLDAP 2.3) attribute(s) in the '' (base) DN. You will need to
grant access to the value that the 'subschemaSubentry', 'configContext'
and 'monitorContext' points to (usually 'cn=Subschema', 'cn=config'
and 'cn=Monitor' respectivly).

One way to find out if you have this, is to execute the following command:

	ldapsearch -x -LLL -h localhost -s base -b '' objectclass=* \
		namingContexts subschemaSubentry monitorContext configContext

If this only returns one line, such as:

----- s n i p -----
[tuzjfi.tty2]$ ldapsearch -x -LLL -h localhost -s base -b '' objectclass=* \
namingContexts subschemaSubentry monitorContext configContext
dn:

[tuzjfi.tty2]$
----- s n i p -----

then you do not have anonymous read access to namingContexts. It should
look something like:

----- s n i p -----
[tuzjfi.tty2]$ ldapsearch -x -LLL -h localhost -s base -b '' objectclass=* namingContexts subschemaSubentry
dn:
configContext: cn=config
monitorContext: cn=Monitor
namingContexts: cn=LOG1
namingContexts: c=SE
namingContexts: dc=com
subschemaSubentry: cn=Subschema

[tuzjfi.tty2]$
----- s n i p -----

This shows that I have two databases. One with base 'c=SE' and
one with base 'dc=com'. The first naming context here is actually
used for the 'accesslog' overlay that came with OpenLDAP v2.3
and basically lets you log all operations of choosen database
backend to another database backend (in this case located in the
'cn=LOG1' suffix). Please read doc/README.overlays for more about
this.

To allow anonymous read access to the namingContexts in a OpenLDAP
2.1 server, I use the following ACL (at the very top):

----- s n i p -----
# We need to allow anonymous read access to the namingContexts attribute
access to dn.base="" attrs=namingContexts,subschemaSubentry,objectClass,monitorContext,configContext,entry
	by peername="IP=127\.0\.0\.1:.*" read

# We need to allow anonymous to read the schema definitions the LDAP
# server knows about. But only from localhost!
access to dn.subtree="cn=Subschema"
        by peername="IP=127\.0\.0\.1:.*" read

# By default, allow read access to the structuralobjectclass in the cn=LOG1
# object
access to dn.base="cn=LOG1"
        attrs=structuralobjectclass,objectClass,entry
        by peername.ip="127\.0\.0\.1" read

# * Make sure the 'admin' have full read access to ALL attributes
#   in the monitor backend no matter where he/she comes from.
# * Anonymous read from local host.
access to dn.subtree="cn=Monitor"
       by dn.exact="uid=turbo,ou=People,o=Fredriksson,c=SE" read
       by peername.ip="127\.0\.0\.1" read

# Allow anonymous to read the configuration branch from local host.
#       by * read
access to dn.subtree="cn=config"
        by dn.exact="uid=turbo,ou=People,o=Fredriksson,c=SE" write
        by peername.ip="127\.0\.0\.1" read
----- s n i p -----

The reason why we (phpQLAdmin) needs anonymous read access to
namingContexts, subschemaSubentry etc is because phpQLAdmin does a lot
of 'automatic discovering' of what the database look like etc.

NOTE: If phpQLAdmin isn't running on the same host as the LDAP server,
      then just change the localhost IP to the real IP in the 'by peername'
      above.


Access to the root dn and it's attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For a branch administrator to get all the needed buttons in the domain
details pages, all authenticated users need access to the attributes
defined in the 'phpQLAdminGlobal' object class. Either that, or you
specify all branch administrators manually...

An ACL for this would look like this (allowing authenticated access to
my c=SE branch):

----- s n i p -----
access to dn="c=SE"
        attrs=useControls,useEzmlm,useBind9,useWebSrv,autoReload,allowServerChange,whoAreWe,language,hostMaster,ezmlmBinaryPath,krb5RealmName,krb5AdminServer,krb5PrincipalName,krb5AdminKeytab,krb5AdminCommandPath,controlBaseDn,ezmlmAdministrator,controlsAdministrator,useACI,useSimScan
        by users read
----- s n i p -----


