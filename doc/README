Using phpQLAdmin with existing LDAP database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you already have an LDAP database you'd like to administrate
through phpQLAdmin, it is a requirenment that you read README.acl.
If you don't (and fully understand it! :), you won't see your database,
no matter HOW you configure it.

Upgrading
~~~~~~~~~
If you're upgrading from a phpQLAdmin version older than 2.0.10,
then you MUST read the README.upgrade file! It contains important
information that will break your admin interface (phpQLAdmin) if
not fully understood.

LDAP layout independence
~~~~~~~~~~~~~~~~~~~~~~~~
Version 2.0 of phpQLAdmin was (re)designed to be more forgiving on how
the layout of the LDAP database is layed out. It does however dictate
slightly that you follow some kind of 'standard' (if there is such
a thing in the world of LDAP :).

Configuration and layout
~~~~~~~~~~~~~~~~~~~~~~~~
To configure phpQLAdmin, copy the file include/config.inc.CHANGE_ME
to include/config.inc and change the latter. Go throug each line,
and decide where the database is (ie FQDN - Fully Qualified Domain Name
or IP address - of the LDAP server), what's the base dn of your
QMailLDAP objects etc.

  Domain layout        Organization layout    Organization layout/mixed
  =============        ===================    =========================
  dc=com               c=SE                   c=SE
    dc=fredriksson       ou=Fredriksson         ou=Fredriksson
      ou=People            ou=People              cn=User Name1
        uid=usename          uid=username       ou=Winas
      ou=Groups            ou=Groups              cn=User Name2
        cn=groupname         cn=groupname       
    dc=winas             ou=Winas
      ou=People            ou=People
        uid=usename          uid=username
      ou=Groups            ou=Groups
        cn=groupname         cn=groupname

In the first column is two 'domains' - Fredriksson and Winas. What this
means is that users are under the 'ou=People' object and groups are
under the 'ou=Groups'. Each under the actual 'domain' (dc) object.

The 'domain' refer to the 'basetree' (dc=fredriksson/dc=winas and
ou=Fredriksson/ou=Winas in these two examples), NOT to the domainname!
In the first two columns, I use the top DN (dc=com or c=SE) as base
search in phpQLAdmin.

This layout is configured by defining PQL_LDAP_SUBTREE_USERS and/or
PQL_LDAP_SUBTREE_GROUPS, so without these, you CAN get a flat layout,
but please don't.


The third layout is what I would like to call 'mixed'. It don't
separate users under ou=People etc, but directly under the branch and
users don't have the UID attribute but is using CN as part of their
RDN.

Also, you shouldn't mix the layouts types in one database. What you
should do, is configure multiple top suffixes in your LDAP database
(multiple database backends with different suffixes). phpQLAdmin is
since version 2.0.10 able to cope with that, and show all database as
one.

Configuration in LDAP
~~~~~~~~~~~~~~~~~~~~~
With version 2.0.5, it's possible to have site specific configurations
in the database and with 2.0.10 it's a requirement. It is saved into
the topmost RDN's ('dc=com' and 'c=SE' in my two examples above) objects
and also in each branch (dc=fredriksson, ou=Fredriksson etc above),
so make sure you have access to modify these objects before saving a
site global value.

As said, since 2.0.10 it's a requirement to set the LDAP object
configuration, so as soon as you've logged in for the first time,
find the 'Show configuration' page and set all configuration values.
To be able to fully see all options, you will have to enable 'Advanced
mode' and have write access (and have the 'administrator' attribute) to
the topmost DN (dc=com and c=SE above).


Making sure you have write access to the database is a matter of the
LDAP server, not phpQLAdmin so consult your LDAP servers documentation
on how to do this. The 'ACL' stuff in phpQLAdmin isn't used for
real access control, it's more a fact of specifying what you can SEE.

If you only have the required objectclasses (top and/or domain in a
domain layout for example), phpQLAdmin will add the two objectclasses
'phpQLAdminConfig' and 'phpQLAdminBranch' to the object before it
writes the configuration, so backward compability should be ok with an
non-phpQLAdmin created domain/branch. If it's not, please report a bug
at the mailinglist phpqladmin@bayour.com.

Schema issues
~~~~~~~~~~~~~
There is a couple of problems with the phpQLAdminBranch objectclass.
One is is the 'defaultDomain' attribute. It exists in both the
qmailControl.schema distributed with the QmailLDAP/Controls patch and
in the phpQLAdmin.schema distributed with phpQLAdmin. If you don't use
the QmailLDAP/Controls patch, you will have to uncomment the attribute
from the phpQLAdmin.schema before you restart your LDAP server. The
attribute is defined on lines 299 to 303 in the phpQLAdmin.schema, so
remove the leading dashes (#) on those lines.

Another 'problem' with the schema is the Kerberos stuff. Kerberos
Realm Name (krb5RealmName) and Kerberos Principal Name (krb5PrincipalName)
is defined in krb5-kdc.schema that comes with slapd. If you're not using
that schema, then either uncomment the lines 233 through 243 or remove
the attributes from the MAY clause of the phpQLAdminConfig objectclass
(line 348 to 350). The kerberos stuff in the schema is just a 'hack'
until we get REAL Kerberos/AFS support in PHP.

Kerberos principal creation
~~~~~~~~~~~~~~~~~~~~~~~~~~~
As of version 2.0.10, phpQLAdmin have (very) rudimentary support for
creating the corresponding Kerberos principal in the KDC. This is
solely done in the user creation script (example script 'create_user.pl'
have been included for quite some time and have been updated to show
how it's done). To give this script write access to a remote Kerberos
database, we need to have a special principal and a keytab for this
principal so that we can do 'unattended administration' (ie script
vise).

My setup consists of creating the principal 'phpQLAdmin', exporting
that principal into a keytab (krb5.keytab.phpQLAdmin) and giving the
principal 'phpQLAdmin' full access to the Kerberos database in the
Kerberos KAdmind ACL file. How to do this is documented in your
Kerberos system documentations. 

NOTE: This might be a security hole, because if your webserver is
compromised, so will your Kerberos database. And if the Kerberos
database is compromised, "you're screwed"! So be very carefull before
deciding to do this.


To be able to create a Kerberos principal, you will have to have
'KERBEROS' defined in the Password encryption schemes (see the 'Show
configuration' page). You will then see five more configuration
options in the 'Global configuration' section. Shown below, with
example definitions:

	Kerberos realm			TEST.ORG
	Kerberos admin server		kerberos.test.org
	Kerberos admin principal	phpQLAdmin  
	Kerberos admin keytab		/etc/krb5.keytab.phpQLAdmin  
	Path to Kerberos kadmin command	/usr/sbin  

Without ALL (!) of these values, the (example) script will not even
TRY to create a Kerberos principal (actually, phpQLAdmin won't call
the script).

Modifying or deleting the principal when deleting the user is not
yet implemented.

Protocol errors
~~~~~~~~~~~~~~~
The PHP/LDAP module does an LDAPv2 bind, which means that you will
have to allow a version 2 bind. In OpenLDAP version 2.0, this is done
by making sure that you DON'T (!) have 'disallow bind_v2' in your
slapd.conf file. In  OpenLDAP version 2.1, disallowing v2 bind is the
default and you will have to enable v2 bind by putting 'allow bind_v2'
in the slapd.conf file.  If slapd does not allow v2 bind, you will get
the following error in your logfile:

	Could not bind to ldap server: Protocol error

Templates
~~~~~~~~~
As of version 2.0.10, phpQLAdmin have rudimentary support for user and
domain/branch templates. This configured in the 'Show phpQLAdmin
configuration' page. For a new installation, 'Password encryption
schemes', 'User objectclasses' and 'Domain objectclasses' will be
empty. You will have to setup this for your self. What objectclasses
should your user objects have? What objectclasses should your
domain/branch objects have etc... This require knowledge on how LDAP
works!

Administrator login
~~~~~~~~~~~~~~~~~~~
To be able to login to the LDAP server from phpQLAdmin, the object
you're using for login must have the possibility/authority to do a
simple bind. That usually means that there have to be a 'userPassword'
attribute in the object. Only having the password in the slapd.conf
file (as example below) won't help.

	rootdn	cn=Manager,....
	rootpw	SecretPWHere

Apache configuration
~~~~~~~~~~~~~~~~~~~~
You will have to enable register_globals in your php.ini file (don't
forget to restart the apache server).

QmailLDAP/Controls restart
~~~~~~~~~~~~~~~~~~~~~~~~~~
Unfortunatly, QmailLDAP/Controls needs to be restarted every time
a configuration option have changed (if they are in LDAP as a
QmailLDAP/Controls object). This is done by creating a cron job
that looks something like the following. The example checks locals
and rcpthosts every five minutes. If a change have been made, it
will restart qmail.

# Check for new locals/rcpthosts in the QmailLDAP/Controls object
5,15,25,35,45,55 * * * * root /var/www/phpQLAdmin/restart_qmail.pl

This example require that phpQLAdmin is installed into /var/www/phpQLAdmin/.
If it isn't on your system, change the path to restart_qmail.pl.

This script require a config file that's named /etc/qmail/.restart_qmail.conf,
and will look like this:

LDAP_SERVER="ldap.example.com"
LDAP_SEARCH="/usr/bin/ldapsearch"
LDAP_CTRLDN="ou=QmailLDAP,dc=example,dc=com"
QMAIL_INIT="/etc/init.d/qmail"
HOSTNAME="qmail.example.com"

You must have the QmailLDAP/Controls object named

cn=qmail.example.com,ou=QmailLDAP,dc=example,dc=com

for this to work.


For more information on installations, please view doc/index.php
through the webbrowser. Note though that documentation is not my
stronges side while coding, so it is much out of date. I will
evenually get to it, but... :)
