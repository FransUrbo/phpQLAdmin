Using phpQLAdmin with existing LDAP database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you already have an LDAP database you'd like to administrate
through phpQLAdmin, it is a requirenment that you read README.acl.
If you don't (and fully understand it! :), you won't see your database,
no matter HOW you configure it.

Upgrading
~~~~~~~~~
If you're upgrading from a phpQLAdmin version older than 2.0.10,
then you MUST read the README.upgrade file! It contains important
information that will break your admin interface (phpQLAdmin) if
not fully understood.

LDAP layout independence
~~~~~~~~~~~~~~~~~~~~~~~~
Version 2.0 of phpQLAdmin was (re)designed to be more forgiving on how
the layout of the LDAP database is layed out. It does however dictate
slightly that you follow some kind of 'standard' (if there is such
a thing in the world of LDAP :). That is, it's very unforgiving if 
you have a flat database. If you do, don't use LDAP, use SQL!

Configuration and layout
~~~~~~~~~~~~~~~~~~~~~~~~
To configure phpQLAdmin, copy the file include/config.inc.CHANGE_ME
to include/config.inc and change the latter. Go throug each line,
and decide where the database is, what's the base dn etc. From that,
the database should be layed out something like this:

  Domain layout        Organization layout    Org layout/mixed
  =============        ===================    ================
  dc=com               c=SE                   c=SE
    dc=fredriksson       ou=Fredriksson         ou=Fredriksson
      ou=People            ou=People              cn=User Name1
        uid=usename          uid=username       ou=Winas
      ou=Groups            ou=Groups              cn=User Name2
        cn=groupname         cn=groupname       
    dc=winas             ou=Winas
      ou=People            ou=People
        uid=usename          uid=username
      ou=Groups            ou=Groups
        cn=groupname         cn=groupname

Here I show two 'domains' - Fredriksson and Winas. What this means
is that users are under the 'ou=People' object and groups are under
the 'ou=Groups'. Each under the actual 'domain' object.

The 'domain' refer to the 'basetree' (dc=fredriksson/dc=winas and
ou=Fredriksson/ou=Winas in these two examples), NOT to the domainname!
In both examples, I use the top DN (dc=com or c=SE) as base search in
phpQLAdmin.

This layout is configured by defining PQL_LDAP_SUBTREE_USERS and/or
PQL_LDAP_SUBTREE_GROUPS, so without these, you CAN get a flat layout,
but please don't.

The third layout is what I would like to call 'mixed'. It don't separate
users under ou=People etc, but directly under the branch and users don't
have the UID attribute but is using CN as part of their RDN.

Also, you shouldn't mix the layouts types in one database. What you should
do, is configure multiple top suffixes in your LDAP database (multiple
database backends with different suffixes). phpQLAdmin is since version
2.0.10 able to cope with that, and show all database as one.

Configuration in LDAP
~~~~~~~~~~~~~~~~~~~~~
With version 2.0.5, it's possible to have site specific configurations
in the database. It is saved into the topmost RDN's ('dc=com' and 'c=SE'
in my two examples above) objects, so make sure you have access to modify
these objects before saving a site global value.

This is a matter of the LDAP server, not phpQLAdmin so consult your LDAP
servers documentation on how to do this. If you only have the required
objectclasses (top and/or domain in a domain layout for example), phpQLAdmin
will add the two objectclasses 'phpQLAdminConfig' and 'phpQLAdminBranch' to
the object before it writes the configuration, so backward compability should
be ok with an non-phpQLAdmin created domain/branch. If it's not, please report
a bug at the mailinglist phpqladmin@bayour.com.


One attribute in the phpQLAdminBranch objectclass that's a little troublesome
is the defaultDomain attribute. It exists in the qmailControl.schema distributed
with the QmailLDAP/Controls patch. If you don't use this patch, you will have
to uncomment the attribute from the phpQLAdmin.schema before you restart your
LDAP server. The attribute is defined on lines 237 to 241 in the phpQLAdmin.schema,
so remove the leading dashes (#) on those lines.

Protocol errors
~~~~~~~~~~~~~~~
The PHP/LDAP module does an LDAPv2 bind, which means that you will have to
allow a version 2 bind. In OpenLDAP version 2.0, this is done by making sure
that you DON'T (!) have 'disallow bind_v2' in your slapd.conf file. In 
OpenLDAP version 2.1, disallowing v2 bind is the default and you will have
to enable v2 bind by putting 'allow bind_v2' in the slapd.conf file.
If slapd does not allow v2 bind, you will get the following error in your
logfile:

	Could not bind to ldap server: Protocol error

Templates
~~~~~~~~~
As of version 2.0.10, phpQLAdmin have rudimentary support for user and
domain/branch templates. This configured in the 'Show phpQLAdmin configuration'
page. For a new installation, 'Password encryption schemes', 'User objectclasses'
and 'Domain objectclasses' will be empty. You will have to setup this for
your self. What objectclasses should your user objects have? What objectclasses
should your domain/branch objects have etc... This require knowledge on how
LDAP works!

Administrator login
~~~~~~~~~~~~~~~~~~~
To be able to login to the LDAP server from phpQLAdmin, the object you're using
for login must have the possibility/authority to do a simple bind. That usually
means that there have to be a 'userPassword' attribute in the object. Only having
the password in the slapd.conf file (as example below) won't help.

	rootdn	cn=Manager,....
	rootpw	SecretPWHere


For more information on installations, please view doc/index.php through
the webbrowser. Note though that documentation is not my stronges side while
coding, so it is much out of date. I will evenually get to it, but... :)

