These are some notes about the cn=Monitor backend in OpenLDAP v2.[12]. It is not
meant as a 'documentation' and shouldn't really be read by anyone NOT interested
in the internals of OpenLDAP. It is very sparce, and will not really be updated.

It is ONLY intended for me when coding the 'LDAP status pages'!!

* The tree structure of the cn=Monitor backend
=========================================
	cn=Monitor
	+ cn=Time
	  + cn=Current
	    + modifyTimeStamp
	      - The current server time.
	  + cn=Start
	    + createTimeStamp
	      - The (LDAP) server start/boot time.
	+ cn=Statistics
	  + cn=Bytes
	    + description
	      - Number of bytes send to client(s).
	  + cn=PDU
	    + description
?	      - 
	  + cn=Referrals
	    + description
	      - Number of referral chasings since start/boot.
	  + cn=Entries
	    + description
	      - Number of entries send to client(s).
	+ cn=Operations
	  + cn=Completed
	    + description
	      - Number of completed LDAP operations.
	  + cn=Initiated
	    + description
	      - Number of started (but not completed) LDAP operations.
	+ cn=Log
	  - No subordinates
	+ cn=Write Waiters
	  - No subordinates
	+ cn=Read Waiters
	  - No subordinates
	+ cn=Connections
	  + cn=Connection [nr]
	    + description
	      - Information about this specific connection
	      - See below for more information of the content of the
		'description' value.
	  + cn=Current
	    + description
	      - Number of simultaneous connections at this time.
	  + cn=Total
	    + description
	      - Total number of connections since start/boot.
	+ cn=TLS
	  - No subordinates
	+ cn=SASL
	  - No subordinates
	+ cn=Threads
	  + description
	    - Maximum number of threads and 'backload' (?).
	+ cn=Backends
	  + cn=Backend [nr]
	    - Information about the database backend [nr].
	    + description
	      - Type of backend (bdb, ldbm etc).
	    + supportedControl
?	      - OID values
	+ cn=Databases
	  + cn=Database [nr]
	    + description
	      - Type of backend (monitor, bdb, ldbm etc)
	    + seeAlso
	      - Reference to backend information.
		+ cn=Backend [nr],cn=Backends,cn=Monitor
	    + {naming,monitor}Contexts
	      - Root DN of this database backend ('monitorContexts' in the case of the
		Monitor backend type and 'namingContexts' for other suffixes).
	+ cn=Listeners
	  + cn=Listener [nr]
	    + description
	      - IP address and port this (LDAP) server listens on.
		+ IP=0.0.0.0:389
	    + labeledURI
	      - URI this (LDAP) server listens on.
		+ ldap://0.0.0.0:389/

* cn=Connection X,cn=Connections,cn=Monitor
=========================================
This object(s) contain multiple values in the 'decription'
attribute. Looking at the OpenLDAP source code (the file
servers/slapd/back-monitor/conn.c) this is what the values
mean:

	Explanation				Example			C Code variable
	-----------------------------------------------------------------------------------------------------------------
	Connection ID				10			c->c_connid
	LDAP protocol version			3			(long) c->c_protocol
	Received/Executing/Pending/Completed	2/1/0/1			c->c_n_ops_{received,executing,pending,completed}
									  received:	num of ops received (next op_id)
									  executing:	num of ops currently executing
									  pending:	num of ops pending execution
									  completed:	num of ops completed
	Get/Read/Write (low-level)		2/2/0			c->c_n_{get,read,write}
									  get:		num of get calls
									  read:		num of read calls
									  write:	num of write calls
	Connection status etc			rx			[see below]
	Bound as				cn=anonymous		c->c_dn.bv_val (or SLAPD_ANONYMOUS)
	Listener URL				ldap://0.0.0.0:389/	c->c_listener_url.bv_val
	Peer domain				localhost		c->c_peer_domain.bv_val
	Peer name				IP=127.0.0.1:2352	c->c_peer_name.bv_val
	Sock name				IP=0.0.0.0:389		c->c_sock_name.bv_val
	Start time				20040124153404Z		c->c_starttime
	Completion time				20040124153404Z		c->c_activitytime

Note: The fifth value ('rx') is a little complicated. It
      looks like this in the code:
	c->c_currentber ? "r" : "",
	c->c_writewaiter ? "w" : "",
	LDAP_STAILQ_EMPTY( &c->c_ops ) ? "" : "x",
	LDAP_STAILQ_EMPTY( &c->c_pending_ops ) ? "" : "p",
	connection_state2str( c->c_conn_state ),
	c->c_sasl_bind_in_progress ? "S" : "",

The 'c' variable is of a 'struct Connection' (defined in the
file servers/slapd/slap.h):

----- s n i p -----
typedef struct slap_conn {
        int                     c_struct_state; /* structure management state */
        int                     c_conn_state;   /* connection state */

        ldap_pvt_thread_mutex_t c_mutex; /* protect the connection */
        Sockbuf         *c_sb;                  /* ber connection stuff           */

        /* only can be changed by connect_init */
        time_t          c_starttime;    /* when the connection was opened */
        time_t          c_activitytime; /* when the connection was last used */
        unsigned long           c_connid;       /* id of this connection for stats*/

        struct berval   c_peer_domain;  /* DNS name of client */
        struct berval   c_peer_name;    /* peer name (trans=addr:port) */
        Listener        *c_listener;
#define c_listener_url c_listener->sl_url       /* listener URL */
#define c_sock_name c_listener->sl_name /* sock name (trans=addr:port) */

        /* only can be changed by binding thread */
        int             c_sasl_bind_in_progress;        /* multi-op bind in progress */
        struct berval   c_sasl_bind_mech;                       /* mech in progress */
        struct berval   c_sasl_dn;      /* temporary storage */

        /* authorization backend */
        Backend *c_authz_backend;

        AuthorizationInformation c_authz;
        GroupAssertion *c_groups;

        ber_int_t       c_protocol;     /* version of the LDAP protocol used by client */

        LDAP_STAILQ_HEAD(c_o, slap_op) c_ops;   /* list of operations being processed */
        LDAP_STAILQ_HEAD(c_po, slap_op) c_pending_ops;  /* list of pending operations */

        ldap_pvt_thread_mutex_t c_write_mutex;  /* only one pdu written at a time */
        ldap_pvt_thread_cond_t  c_write_cv;             /* used to wait for sd write-ready*/

        BerElement      *c_currentber;  /* ber we're attempting to read */
        int             c_writewaiter;  /* true if writer is waiting */

#ifdef LDAP_CONNECTIONLESS
        int     c_is_udp;               /* true if this is (C)LDAP over UDP */
#endif
#ifdef HAVE_TLS
        int     c_is_tls;               /* true if this LDAP over raw TLS */
        int     c_needs_tls_accept;     /* true if SSL_accept should be called */
#endif
        int             c_sasl_layers;   /* true if we need to install SASL i/o handlers */
        void    *c_sasl_context;        /* SASL session context */
        void    *c_sasl_extra;          /* SASL session extra stuff */
        struct slap_op  *c_sasl_bindop; /* set to current op if it's a bind */

        PagedResultsState c_pagedresults_state; /* paged result state */

        long    c_n_ops_received;       /* num of ops received (next op_id) */
        long    c_n_ops_executing;      /* num of ops currently executing */
        long    c_n_ops_pending;        /* num of ops pending execution */
        long    c_n_ops_completed;      /* num of ops completed */

        long    c_n_get;                /* num of get calls */
        long    c_n_read;               /* num of read calls */
        long    c_n_write;              /* num of write calls */
} Connection;
----- s n i p -----
