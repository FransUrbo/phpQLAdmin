Webserver configuration
~~~~~~~~~~~~~~~~~~~~~~~
As of 2.0.17, phpQLAdmin have rudimentary support for having (part of)
the webserver configuration in the LDAP server. This isn't the
pretties solution, but it's something. The included example script
(scripts/create_websrv_cfg.pl or scripts/extract_webserver_objects.pl)
will create all the <VirtualHost> definitions which can then be
included with the Include option in your main Apache configuration
file (httpd.conf).  The script is intended to run as a cron job every
now and then (once every hour sounds resonable) to create the
<VirtualHost> file.

NOTE: Since I'm stuck with Apache 1.3 for a little while longer, I'm
      forced to use the module 'mod_ldap_cfg' (availible at the URL
      http://www.cs.washington.edu/homes/bdferris/) which I have just
      been able to get working. Works great and will render the two
      scripts and cron setup redundant.


As of phpQLAdmin version 2.1.5, I have desided to fully support this
module instead of my own schema hack. It's the only module that seems
resonable and have enough options to be usefull. If you're upgrading
from a phpQLAdmin earlier than 2.1.5 and have created webserver
objects (look in your database with the search string
'objectClass=phpQLAdminWebSrv'), you will have to delete all of them
and create new in the new format.

NOTE: The rest of this file now describes the _new_ object format...

phpQLAdmin can't (at the moment) handle ALL the values possible, but
the most common (i.e. the ones _I_ use/need :).


There is an example LDIF file in the demo directory ('apache.ldif')
which will setup one physical server with two virtual machines. One
listening on FQDN:PORT of 'websrv1.domain.tld:80', the other listens
on the same FQDN, but on port 443 (SSL).

As of phpQLAdmin v2.3.3 (CVS commit at July 8, 2006), the organization
unit for the sub-branch is defined in include/config.inc (the
PQL_CONF_SUBTREE_APACHE define) so the demo file must be modified
before use. Replace all occurrences of the following string

	%PQL_CONF_SUBTREE_APACHE%

with the value you've selected in include/config.inc for the 
PQL_CONF_SUBTREE_APACHE define. This must be done BEFORE any attempt
of loading the LDIF!

Please also make sure to update the 'scripts/extract_webserver_objects.pl'
script. It also have the '%PQL_CONF_SUBTREE_APACHE%' stuff that needs
replacing...

The LDIF file will create the webserver branch (below the 'o=Main Branch,c=SE'
which was/is created with the 'database-main.ldif' LDIF example file)
where the first 'cn' branch (third object) is like an organizational
unit, but for this specific (physical) webserver. The FQDN
'websrv1.domain.tld' is the actual machine name, NOT a vhost name!

The reason we add ':80' in this 'base' DN is because we must separate
the non-ssl listener from the ssl enabled one (see the last two objects).
This is the tree you'll get with that LDIF:

  [o=Main Branch,c=SE]
    PQL_CONF_SUBTREE_APACHE define
      cn=websrv1.domain.tld:80
        ApacheServerName=websrv1.domain.tld
        ApacheServerName=www1.domain.tld
          ApacheSectionArg=/doc
        ApacheServerName=www2.domain.tld
        ApacheServerName=www3.domain.tld
      cn=websrv1.domain.tld:443
        ApacheServerName=www1.domain.tld
      [cn=websrv2.domain.tld:80]
        [ApacheServerName=www4.domain.tld]
        [etc]

Here you can clearly see why it is/was important to add the port part
in the DN. We have TWO virtual hosts named 'www1.domain.tld'. One is
listening on port 80 (normal/non-ssl or 'http://...') and the second
is listening on port 443 (the ssl or 'https://...'). Without the port,
the two vhosts whould have the same DN, which wouldn't work (you can't
put TWO vhosts in the same object!).  Another (DB/branch) idea would
be to put an extra cn between the PQL_CONF_SUBTREE_APACHE define DN
and the 'cn=websrv1.domain.tld:XX' DN (named 'cn=websrv1.domain.tld'),
but that wouldn't be as 'pretty' in the long run :). Besides, as _I_
see vhosts, it isn't important _where_ the vhost is (what physical
machine), only the _name_ of the vhost.

  [o=Main Branch,c=SE - created in database-main.ldif]
    PQL_CONF_SUBTREE_APACHE define
      cn=websrv1.domain.tld
        cn=websrv1.domain.tld:80
          ApacheServerName=websrv1.domain.tld
          ApacheServerName=www1.domain.tld
            ApacheSectionArg=/doc
          ApacheServerName=www2.domain.tld
          ApacheServerName=www3.domain.tld
        cn=websrv1.domain.tld:443
          ApacheServerName=www1.domain.tld
      [cn=websrv2.domain.tld]
        [cn=websrv2.domain.tld:80]
          [ApacheServerName=www4.domain.tld]
          [etc]

The branch below 'websrv2.domain.tld' in these two examples isn't
created here, they're just here to show how it the rest of the
DB can look like (and where to put the NEXT physical webserver).

The LDIF will make Apache generate the following configuration
snippet (for the non-ssl Apache instance):

----- s n i p -----
<VirtualHost 192.168.1.9:80 >
    ServerName websrv1.domain.tld
    ServerAdmin turbo@bayour.com
    DocumentRoot /home/apache/websrv1
</VirtualHost>
<VirtualHost 192.168.1.9:80 >
    ServerName www1.domain.tld
    ServerAdmin turbo@bayour.com
    DocumentRoot /home/apache/www1
    <Location /doc >
        Order deny,allow
        Deny from all
        Allow from 192.168.1
        Allow from 192.168.15
        Options Indexes MultiViews
    </Location>
</VirtualHost>
<VirtualHost 192.168.1.9:80 >
    ServerName www2.domain.tld
    ServerAdmin turbo@bayour.com
    DocumentRoot /home/apache/www2
    ErrorLog /var/log/apache/www2-error.log
    TransferLog /var/log/apache/www2-access.log
</VirtualHost>
<VirtualHost 192.168.1.9:80 >
    ServerName www3.domain.tld
    ServerAdmin turbo@bayour.com
    DocumentRoot /home/apache/www3
    RewriteEngine on
    RewriteRule ^/(.*) https://www2.domain.tld/$1
</VirtualHost>
----- s n i p -----


The file 'demo/apache.conf' can/should be included from your
httpd.conf to allow virtual hosting from the LDAP server.

Some important notes about this file; the 'NameVirtualHost'
configuration directive _must_ contain the port number,
the 'LDAPCfg_BaseDN' _must_ be the base of this physical
servers DN (the 'dn: cn=...' object DN) and finaly, for
all this to work, the 'LDAPCfg_Load' must be '(objectClass=*)'.

This because we can't give it a BaseDN of 'c=SE' and then
look for '(ApacheSectionArg=192.168.1.9:80)' which would
be the most obvious (I tried for a day until I resorted
to read the source :). The reason for this is that the
module does only _one_ search. And since the 'Location'
stuff is in a _separate_ (sub) DN, it (the module) won't
be able to see/find it... Hence, we must specify the exact
branch where this (physical) servers vhosts is located,
and then load EVERYTHING.
The module is clever enough to figure out what sub DN 
is part of which parent configuration section.
