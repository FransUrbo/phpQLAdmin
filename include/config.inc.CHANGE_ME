<?php
// configuration file
// $Id: config.inc.CHANGE_ME,v 2.56 2004-10-10 12:03:52 turbo Exp $
//
// IMPORTANT:
// If adding or removing defines from this file,
// don't forget to change:
//	./phpQLAdmin.schema
//	./include/pql_config.inc
//

// ----------------------------
// PQL_CONF_HOST (FQDN|IP|URI)
// the host, port and base DN to the QmailLDAP/Controls object which is
// running the ldap-server for the USERS database - separated with semi
// colon (;)
//
// Fields:
//	LDAP host		Fully Qualified Hostname
//					or
//					IP address
//					or
//					LDAP URI (ldap://, ldaps://, ldapi:// etc)
//
//	LDAP port		Port number
//					NOTE: Use only if not using LDAP URI
//
//	Control base	Starting point for the LDAP controls information.
//					NOTE: This is NOT the base DN, or a login DN.
//					It's where the QmailLDAP/Controls objects reside!
//
// Note1: URI and SSL support were added in PHP v4.0.4.
// Note2: If using URI, you will have to URL encode the slashes that
//        shows the path to the socket => ldapi://%2fvar%2frun%2fldapi
//        This is the path to the socket file '/var/run/ldapi'.
//
// Stack these with the + (plus) character and you'll get a list of
// host you can administrate. If only one, then you can obiously only
// configure that :).
// You will have to enable 'Allow change of LDAP server' in the phpQLAdmin
// configuration (HOME->phpQLAdmin Configuration in Advanced mode) for this
// to take effect.
//
// These examples works directly with the demo database(s) distributed
// in the demo directory. Don't use on live server, since my account and
// password (quite easily cracked though :) is in there...
//pql_set_define("PQL_CONF_HOST","ldaps://localhost/;;ou=QmailLDAP,c=SE");
//pql_set_define("PQL_CONF_HOST","ldapi://%2fvar%2frun%2fldapi;;ou=QmailLDAP,c=SE");
pql_set_define("PQL_CONF_HOST","localhost;389;ou=QmailLDAP,c=SE");

// Either you use TLS (=> 'true') or you don't (=> 'false') when connecting
// to the LDAP database...
pql_set_define("PQL_CONF_USE_TLS", false);

// ----------------------------
// PQL_CONF_SUBTREE_USERS
// Is your users organized DIRECTLY under your 'dc' object like
//	uid=username,PQL_CONF_REFERENCE_DOMAINS_WITH=example,<LDAP_BASEDN>
// or in a subtree like
//	uid=username,ou=People,PQL_CONF_REFERENCE_DOMAINS_WITH=example,<LDAP_BASEDN>
// -> If the former (no subtree), leave this empty!
//pql_set_define("PQL_CONF_SUBTREE_USERS", "ou=People");

// ----------------------------
// PQL_CONF_SUBTREE_GROUPS
// If you're using your LDAP database for authentication
// etc, you'd need a group for the user as well. Under
// what subtree is the groups located?
// -> Do not add a comma after this, not needed.
//pql_set_define("PQL_CONF_SUBTREE_GROUPS", "ou=Groups");

// ----------------------------
// mail(message)store generation
//
// user_generate_mailstore (function)
// This function is called to generate the path to the mailbox
// when creating a new user. 
// You may add some code here or just uncomment one of the examples below. 
// Input parameters:
// (object)		ldap		 	-	A LDAP link
// (string)		email			-	local part of the email-address
// (string)		domain			-	domain in which you create the user
// (array)		entry			-	Associative array with all attributes phpQLAdmin is about
//									to add to the new userobject. The index is the attributename.
// (string)		type			-	Type of object being created. Currently one of:
//									user	A user object
//									branch	A branch object
//
// Returns:	(string) path to the users mailstore
//
// NOTE1: 	If this path is not absolute (w/o trailing slash)
//			it will be prefixed by qmail/LDAP with qmail/control/ldapmessagestore
//
// NOTE2:	These functions are TEMPLATES. To fully utilise this, you probably need some
//			PHP knowledge. I've tried my best to write as usefull functions as possible,
//			but it's impossible to anticipate every need...
//
// WARNING:	phpQLAdmin will not check the return-value. Be sure not to return nonsense or
//			a path which is already assigned to another user.
//
// Supported replacement code in this function:
//		%d% = domain
//		%u% = username
//		%h% = mailhost
//		%m% = mailaddress
function user_generate_mailstore($ldap, $email, $dn, $entry, $type) {
	$mailstore = '';

	// -------------- Debugging 1:
	// If you suspect that this function isn't doing what it's supposed to do,
	// uncomment the next few lines. This can also be used in bugtracker or the
	// mailinglist for help...
//	echo "user_generate_mailstore('<i>linkid</i>', '$email', '$dn', '<i>array</i>', '$type')<br>";
//	echo "The entry array: "; printr($entry);
	
	// -------------- Template 1: domains baseMailDir/uid
//	if($dn) {
//		// We're called with a dn of a branch object.
//
//		// ... retreive the 'baseMailDir' attribute value from the branch object.
//		$mailstore = pql_domain_get_value($ldap, $dn, pql_get_define("PQL_ATTR_BASEMAILDIR"));
//
//		// ... retreive the 'defaultDomainName' attribute value from the branch object.
//		$domain    = pql_domain_get_value($ldap, $dn, pql_get_define("PQL_ATTR_DEFAULTDOMAIN"));
//	} else {
//		// Default base directory
//		$mailstore = "/var/mail";
//
//		// The branch name is (should be) included in the calling of the function.
//		$domain    = $entry["BRANCH_NAME"];
//	}
//	
//	if($type == 'branch') {
//		// We're creating a branch, so add the domain name to the path.
//		$branch = '%d%/';
//	}
//	
//	if(! ereg("/$", $mailstore)) {
//		// The base mail directory value doesn't end with a slash, add one.
//		// The '$branch' variable will be empty for users, set if a branch.
//		$mailstore = $mailstore . "/" . $branch . "%u%";
//	} else {
//		// The base mail directory value doesn't end with a slash, add one.
//		// The '$branch' variable will be empty for users, set if a branch.
//		$mailstore = $mailstore . $branch . "%u%";
//	}
	
	// -------------- Template 2: domain.tld/username
//	$mailstore = "%d%/%u%"; 
	
	// -------------- Template 3: d/domain.tld/username (First character of the domainname / domainname / uid)
//	$mailstore = substr($domain, 0, 1) . "/%d%/%u%";

	// -------------- Template 4: mail.host.tld/domain.tld/username
//	$mailstore = "%h%/%d%/%u%";

	// -------------- Template 5: mail@domain.tld (complete email-address)
	$mailstore = "%m%";

	// -------------- Template 6: 123456
	// Generate a random (6 digit) number and make sure no other user has
	// the same mailstore. This will be slow if you have many users, use
	// some hash instead of random numbers
	//
	// Seed the random number generator
//	$seed = list($usec, $sec) = explode(' ', microtime());
//	$seed = (float) $sec + ((float) $usec * 100000);
//	mt_srand($seed);
//	
//	for(;;) {
//	 	// Generate a random numer between 100000 and 999999 (6 digits)
//	 	$mailstore = mt_rand(100000, 999999);
//
//	 	// Check whether another user already has this mailstore. If yes,
//		// generate another random number.
//	 	// TODO: ldap_basedn isn't availible any more (it's an array of base DN's)!
//	 	$filter = pql_get_define("PQL_ATTR_MAILSTORE") . "=" . pql_maybe_encode($mailstore,
//																				pql_get_define("PQL_ATTR_MAILSTORE"),
//																				$ldap);
//	 	if(!pql_search($ldap, $ldap_basedn, $filter)) {
//	 		break;
//	 	}
//	}

	// -------------- Note 1:
	// Convert the whole mailstore to lowercase? Uncomment next line. 
//	$mailstore = strtolower($mailstore);

	// -------------- Note 2:
	// Convert the whole mailstore to uppercase? Uncomment next line. 
//	$mailstore = strtoupper($mailstore);													

	// ----------------------------------------------
	// Add a trailing slash for Maildir's.
	if(! ereg("/$", $mailstore)) {
		$mailstore .= "/";
	}

	// Substitue the '%X%' values with real values...
	$mailstore = pql_complete_constant($mailstore, array("d" => pql_format_international($domain), 
														 "u" => $entry[pql_get_define("PQL_ATTR_UID")], 
														 "h" => $entry[pql_get_define("PQL_ATTR_MAILHOST")],
														 "m" => $entry[pql_get_define("PQL_ATTR_MAIL")]));

	return($mailstore);
}

// ----------------------------
// home directory generation
//
// See information about function user_generate_mailstore()
// Above. Exact same options apply
function user_generate_homedir($ldap, $email, $dn, $entry, $type) {
    $homedir = '';

	// -------------- Debugging 1:
	// If you suspect that this function isn't doing what it's supposed to do,
	// uncomment the next few lines. This can also be used in bugtracker or the
	// mailinglist for help...
//	echo "user_generate_homedir('<i>linkid</i>', '$email', '$dn', '<i>array</i>', '$type')<br>";
//	echo "The entry array: "; printr($entry);

//	if($dn) {
//		// ... retreive the 'baseHomeDir' attribute value from the branch object.
//		$homedir = pql_domain_get_value($ldap, $dn, pql_get_define("PQL_ATTR_BASEHOMEDIR"));
//
//		// ... retreive the 'defaultDomainName' attribute value from the branch object.
//		$domain  = pql_domain_get_value($ldap, $dn, pql_get_define("PQL_ATTR_DEFAULTDOMAIN"));
//	} else {
//		// Default base directory
//		$homedir = "/home";
//
//		// The branch name is (should be) included in the calling of the function.
//		$domain  = $entry["BRANCH_NAME"];
//	}
//	
//	if($type == 'branch') {
//		// We're creating a branch, so add the domain to string
//		$branch = '%d%/';
//	}
//	
//	if(! ereg("/$", $homedir)) {
//		// The base home directory value doesn't end with a slash, add one.
//		// The '$branch' variable will be empty for users, set if a branch.
//		$homedir = $homedir . "/" . $branch . "%u%";
//	} else {
//		// The base home directory value doesn't end with a slash, add one.
//		// The '$branch' variable will be empty for users, set if a branch.
//		$homedir = $homedir . $branch . "%u%";
//	}

	// ----------------------------------------------
	// Add a trailing slash for Maildir's.
	if(! ereg("/$", $homedir)) {
		$homedir .= "/";
	}

	// Substitue the '%X%' values with real values...
	$homedir = pql_complete_constant($homedir, array("d" => pql_format_international($domain), 
													 "u" => $entry[pql_get_define("PQL_ATTR_UID")], 
													 "h" => $entry[pql_get_define("PQL_ATTR_MAILHOST")],
													 "m" => $entry[pql_get_define("PQL_ATTR_MAIL")]));

	return($homedir);
}

// ----------------------------
// UID generation
//
// user_generate_uid (function)
// This function is called to suggest a value for the uid when you add an user.
// You may add some code here or just uncomment one of the examples below. 
// Input parameters:
// (resource)	ldap		 	-	A LDAP resource identifier 
// (string)		surname 		- 	surname  
// (string)		name	 		- 	name
// (string)		email			-	complete email-address
// (string)		domain			-	branch in which you create the user
// (string)		account_type	-	Chosen account type; "mail" or "forward"  
//
// Returns: (string) suggested uid; may be changed by the user
function user_generate_uid($ldap, $surname, $name, $email, $domain, $account_type) {
	//	return(pql_get_next_username($ldap, $domain));	// Use prefix from branch to generate UID.
	//	return($email);									// Complete email address
	//	return(eregi_replace('@', '%',$email));			// complete email-address but '%' instead of '@'
	//	return(eregi_replace('@', '_',$email));			// complete email-address but '_' instead of '@'
	//	return($surname . $name);						// "Firstname Lastname"
	//	return(substr($surname, 0, 1) . $name);			// First character of ther surname + complete lastname
}

// ----------------------------
// EMAIL generation
//
// user_generate_email (function)
// This function is called to create a value for the email address when
// you add a user. You may add some code here or just uncomment one of the examples below.
// Input parameters:
// (resource)	ldap		 	-	A LDAP resource identifier 
// (string)		surname 		- 	surname  
// (string)		lastname 		- 	lastname
// (string)		domainname		-	A domain name in the form 'domain.tld'
// (string)		domain			-	branch in which you create the user
// (string)		account_type	-	Chosen account type; "mail" or "forward"  
//
// Returns: (string) suggested email address
function user_generate_email($ldap_linkid, $surname, $lastname, $domainname, $domain, $account_type) {
	// Compose the username in the form 'firstname.lastname@domain.tld'.
	// Compose the username with first+last name with dot in between.
	if(!empty($surname))
	  $mail = $surname;
	if(!empty($lastname))
	  $mail .= ".$lastname";
	if(!empty($domainname))
	  $mail .= "@$domainname";

	return(lc($mail));
}

// ----------------------------
// Generate an ACI entry for object
//
// If this function is uncommented, then ACI's will be used!
//
// user_generate_aci (function)
// This function is called to create an list of ACI's that should be added
// to an object as it is created.
// Input parameters:
// (resource)	ldap		 	-	A LDAP resource identifier 
// (string)		user	 		- 	The DN of the user adding/creating the
//									object (or to have the access specified)
// (string)		type			-	Type of object being created. Currently one of:
//									branch	A branch object
//									unit	A sub branch object (ou or another dc)
//									user	A user object
//									group	A system group object
//									dnszone	A Bind 9 DNS zone object
//									websrv	A webserver configuration object
//									qmail	A QmailLDAP/Controls object
//
// Returns: (array) ACI entry in LDIF format
//
// These are the ACI's that I use in my development system. Might not be
// perfect, but it works for me...
//function user_generate_aci($ldap_linkid, $user, $type) {
//	$i = 0;
//
//	// Public entries
//	$aci[$i] = "$i#entry#grant;r,s,c;objectClass,[entry]#public#"; $i++;
//	
//	// Non-public entries
//	if($type == 'user') {
//		$aci[$i] = "$i#entry#grant;x;userPassword,krb5PrincipalName#public#"; $i++;
//		$aci[$i] = "$i#entry#grant;r,s,c;uid,cn,accountStatus,uidNumber,gidNumber,gecos,homeDirectory,loginShell#public#"; $i++;
//
//		// 'user'/'self' writable/readable entries
//		$aci[$i] = "$i#entry#grant;r,s,c;sn,givenName,homePostalAddress,mobile,homePhone,labeledURI,mailForwardingAddress,street,physicalDeliveryOfficeName,mailMessageStore,o,l,st,telephoneNumber,postalCode,title#users#"; $i++;
//		$aci[$i] = "$i#entry#grant;r,s,c;sn,givenName,homePostalAddress,mobile,homePhone,labeledURI,mailForwardingAddress,street,physicalDeliveryOfficeName,mailMessageStore,o,l,st,telephoneNumber,postalCode,title#self#"; $i++;
//	} elseif($type == 'group') {
//		$aci[$i] = "$i#entry#grant;r,s,c;cn,gidNumber#public#"; $i++;
//	} elseif($type == 'qmail') {
//		$aci[$i] = "$i#entry#grant;r,s;[all]#access-id#ENTER_WHOEVER_YOUR_QMAILSERVER_USES"; $i++;
//	} elseif($type == 'branch') {
//		if(pql_get_define("PQL_CONF_REFERENCE_DOMAINS_WITH", $_REQUEST["rootdn"]) == "o") {
//			$aci[$i] = "$i#entry#grant;r,s,c;o#public#"; $i++;
//		} else {
//			$aci[$i] = "$i#entry#grant;r,s,c;dc#public#"; $i++;
//		}
//
//		$aci[$i] = "$i#entry#grant;w,r,s,c,x;[all]#access-id#$user"; $i++;
//	}
//
//	// Non-public entries
//	$aci[$i] = "$i#entry#grant;w,r,s,c;[children]#access-id#$user"; $i++;
//	$aci[$i] = "$i#entry#grant;w,r,s,c,x;[all]#access-id#$user"; $i++;
//
//	return($aci);
//}

// ----------------------------
// Execute command
//
// This function is here as a wrapper. If you don't want it to actually
// DO anything, it should return a non zero value. If you on the other
// hand wants it to really execute the command, uncomment the line which
// does the execute.
function do_exec($command, $output, &$return) {
//	return(@exec($command, $output, $return));

	$return = 100;
	return("Command execution disabled. See ./include/config.inc:do_exec().");
}

/*
 * Local variables:
 * mode: php
 * tab-width: 4
 * End:
 */
?>
