<?php
// configuration file
// $Id: config.inc.CHANGE_ME,v 2.14 2003-01-16 15:25:51 turbo Exp $
//
if(!$PQL_CONFIG_INCLUDED) {
$PQL_CONFIG_INCLUDED = 1;
session_start();
// ----------------------------
// include langugage definition
// lang.de.inc --> german
// lang.en.inc --> english
// lang.it.inc --> italian
// lang.jp.inc --> japanese
// ----------------------------
require("./include/lang.en.inc");

// ----------------------------
// Graphical Output
// ----------------------------
//
// PQL_SHOW_USERS (true | false)
// set to false, if the domain users should not be shown in the navigation
// frame. this results in better performance on servers with large amount
// of users
define("PQL_SHOW_USERS", true);

// PQL_AUTO_RELOAD (true | false)
// true, if the navigation bar should be automatically reloaded, if a domain
// or user was added or deleted
define("PQL_AUTO_RELOAD", true);

// ----------------------------
// Host configuration - who are we?
// This is what's going to be the title
// of the page - in the dragbar of the
// web browser...
// ----------------------------
define("PQL_WHOAREWE", "phpQLadmin at Bayour.COM");

// ----------------------------
// Mail - configuration
// ----------------------------
//
// PQL_HOSTMASTER (emailaddress)
// this is the sender of testmails
define("PQL_HOSTMASTER", "hostmaster@adfinis.ch");

// PQL_TESTMAIL_SUBJECT (text)
// The subject of testmails
define("PQL_TESTMAIL_SUBJECT", "Test");

// PQL_TESTMAIL_MAILTEXT (text)
// This is the text of testmails.
// The following variables are supported:
// - %MAIL%				--> users mail address
// - %CN% 				--> users common name 
// - %SN%				--> users surname
// - %UID% 				--> users uid
// - %QUOTA% 			--> users quota  
// - %VERSION%			--> phpQLAdmin version number
define("PQL_TESTMAIL_MAILTEXT","Hi %CN%,\nyour email address '%MAIL%' seems to work.\n\nHave a nice day,\nyour administrator\n\n\n-------\nsent trough phpQLAdmin %VERSION%");

// PQL_TESTMAIL_AUTOSEND (true | false)
// Automatically send a testmail when a new user or alias has been added?
define("PQL_TESTMAIL_AUTOSEND", false);


// ----------------------------
// LDAP - configuration constants
// (users database)
// ----------------------------
//
// PQL_LDAP_HOST (FQDN|IP)
// the host, port and base DN which is running the ldap-server
// for the USERS database - separated with semi colon (;)
//
// Fields:
//	LDAP host		Fully Qualified Hostname
//					IP address
//					LDAP URI (ldap://, ldaps://, ldapi:// etc)
//	LDAP port		Port number
//					NOTE: Use only if not using LDAP URI
//  Control base	Starting point for the LDAP controls information
//
// Note: URI and SSL support were added in PHP v4.0.4.
//
// Stack these with space and you'll get a list of host you can
// administrate. If only one, then you can obiously only configure
// that :)
//
//define("PQL_LDAP_HOST","ldaps://localhost/;;ou=QmailLDAP,dc=example,dc=com");
define("PQL_LDAP_HOST","localhost;389;ou=QmailLDAP,dc=example,dc=com");

// ----------------------------
// PQL_LDAP_ATTR_* (LDAP attribute names)
// ----------------------------
//
// You should provide the same names here as in your qmail-ldap.h
define("PQL_LDAP_ATTR_MAIL", strtolower("mail"));
define("PQL_LDAP_ATTR_FORWARDS", strtolower("mailForwardingAddress"));
define("PQL_LDAP_ATTR_MAILALTERNATE", strtolower("mailAlternateAddress"));
define("PQL_LDAP_ATTR_QMAILUID", strtolower("qmailUID"));
define("PQL_LDAP_ATTR_QMAILGID", strtolower("qmailGID"));
define("PQL_LDAP_ATTR_MAILSTORE", strtolower("mailMessageStore"));
define("PQL_LDAP_ATTR_HOMEDIR", strtolower("homeDirectory"));
define("PQL_LDAP_ATTR_QUOTA", strtolower("mailQuota"));
define("PQL_LDAP_ATTR_PROGRAM", strtolower("deliveryProgramPath"));
define("PQL_LDAP_ATTR_MAILHOST", strtolower("mailHost"));
define("PQL_LDAP_ATTR_MODE", strtolower("deliveryMode"));
define("PQL_LDAP_ATTR_REPLYTEXT", strtolower("mailReplyText"));
define("PQL_LDAP_ATTR_DOTMODE", strtolower("qmailDotMode"));
define("PQL_LDAP_ATTR_UID", strtolower("uid"));
define("PQL_LDAP_ATTR_PASSWD", strtolower("userPassword"));
define("PQL_LDAP_ATTR_OBJECTCLASS", strtolower("objectclass"));
define("PQL_LDAP_ATTR_ISACTIVE", strtolower("accountStatus"));
define("PQL_LDAP_ATTR_PURGE", strtolower("qmailAccountPurge"));

// These attributes aren't used by qmail-ldap
// However, phpQLAdmin currently relies on them
define("PQL_LDAP_ATTR_CN", strtolower("CN"));
define("PQL_LDAP_ATTR_SN", strtolower("SN"));
define("PQL_LDAP_ATTR_DESCRIPTION", strtolower("description"));
define("PQL_LDAP_ATTR_GIVENNAME", strtolower("givenName"));

// PQL_LDAP_ATTR_DOMAIN (dc | ou)
// How is your tree organized? What objectClass is used
// It's either 'ou=domain,<LDAP_BASEDN>' or 'dc=domain,<LDAP_BASEDN>'
define("PQL_LDAP_ATTR_DOMAIN", "ou");

// PQL_LDAP_SUBTREE_USERS
// Is your users organized DIRECTLY under your 'dc' object like
//	uid=username,PQL_LDAP_ATTR_DOMAIN=example,<LDAP_BASEDN>
// or in a subtree like
//	uid=username,ou=People,PQL_LDAP_ATTR_DOMAIN=example,<LDAP_BASEDN>
// -> If the former (no subtree), leave this empty!
//define("PQL_LDAP_SUBTREE_USERS", "ou=People");

// PQL_LDAP_SUBTREE_GROUPS
// If you're using your LDAP database for authentication
// etc, you'd need a group for the user as well. Under
// what subtree is the groups located?
// -> Do not add a comma after this, not needed.
//define("PQL_LDAP_SUBTREE_GROUPS", "ou=Groups");

// ----------------------------
// PQL_LDAP_OBJECTCLASS_* (LDAP object classes)
// ----------------------------
//
// PQL_LDAP_OBJECTCLASS_USERID (qmailUser | mailRecipent)
// What is the objectclass of a user object?
// qmailUser is default Qmail-LDAP objectClass.
define("PQL_LDAP_OBJECTCLASS_USERID", "qmailUser");

// PQL_LDAP_OBJECTCLASS_USER_EXTRA
// What extra objectclasses should be used when adding a
// user object? The existing (non changable) is 'top', 'person'
// and PQL_LDAP_OBJECTCLASS_USERID. Add any extra objectclasses
// here, separated with space
// -> Do NOT list inetOrgPerson and/or posixAccount here!
// -> Don't quite work yet. It won't take notice of MAY's in
//    these object classes!
//define("PQL_LDAP_OBJECTCLASS_USER_EXTRA", "person pilotPerson organizationalPerson krb5Principal extraPosixAccount trustAccount");

// ----------------------------
// PQL_LDAP_REFERENCE_USERS_WITH (LDAP attribute name)
// Defines which attribute phpQLAdmin passes to various functions when it needs to reference users.
// This attribute is used to retrieve the dn for the referenced user account. So it's
// obvious that this attribute must be unique!  
define("PQL_LDAP_REFERENCE_USERS_WITH", PQL_LDAP_ATTR_UID);

// PQL_LDAP_USER_RDN_ATTRIBUTE (LDAP attribute name)
// This defines the attribute name, which will be taken to generate
// the rdn of a user object. e.g. if you choose 'uid' the rdn will be
// 'uid=idofthisuser'
// If you want phpQLAdmin to behave like earlier versions, use PQL_LDAP_ATTR_CN here.
define("PQL_LDAP_USER_RDN_ATTRIBUTE", PQL_LDAP_ATTR_UID);


// ----------------------------
// LDAP - configuration constants
// (ldap/control database)
// ----------------------------

// PQL_LDAP_CONTROL_USE (true | false)
// set to true, if QmailLDAP/Control patch is supported by your system
define("PQL_LDAP_CONTROL_USE", true);

// PQL_LDAP_CONTROL_AUTOADDLOCALS (true | false)
// set this to true, if phpQLAdmin should automatically add all domains to
// locals. Disable this (false), if you have more than one qmail-ldap server
// and don't want that phpQLAdmin register all domains on this server. Currently, the
// application do not support more than one control database.
define("PQL_LDAP_CONTROL_AUTOADDLOCALS", true);

// ----------------------------
// Should we enable EZMLM mailinglist management?
// This require the admin interface (phpQLAdmin)
// to be running on the ezmlm host. And if it's
// 'replicated' (ie, round-robbing etc), then you'll
// have to do this manually (at the moment).
define("PQL_LDAP_EZMLM_USE", false);

// ----------------------------
// Path to EZMLM commands
define("PQL_LDAP_EZMLM_PATH", "/usr/bin");

// ----------------------------
// Should we enable changing of LDAP server?
// NOTE: Not currently working, so don't use (yet)
define("PQL_LDAP_CHANGE_SERVER", false);

// ----------------------------
// password encryption schemes to allow
// List of schemes for password schemes that we can choose from when
// creating a user (or changing password for a user).
// Separate entries with comma (,).
//
// Possible values:
// 	- CRYPT		no additional libraries needed (use native PHP crypt) (DEFAULT)
// 	- MD5 		mhash library support needed
// 	- SHA		mhash library support needed
// 	- CLEAR		no encryption, works only if qmail-ldap is compiled w/ cleartext password support, BAD IDEA !!
//	- KERBEROS	use OpenLDAP Kerberos V mapping ({KERBEROS}PRINCIPAL@REALM)
define("PQL_PASSWORD_SCHEMES", "CRYPT,MD5,SHA,CLEAR,KERBEROS");

// ----------------------------
// address definitions
// ----------------------------
//
// PQL_CATCHALLUSER (username)
// the username which receives all mails for undefined users. the default is 'catchall' (w/o quotes), so the user
// which has the email address or alias defined to catchall@domain.ch will receive all emails of undefined domain.ch
// addresses. this can be changed in qmail-ldap at compile time.
define("PQL_CATCHALLUSER", "catchall");

// ----------------------------
// some mailmessagestore things
// ----------------------------

// PQL_ALLOW_ABSOLUTE_PATH (true | false)
// true, if absolute paths are allowed to set
// the mailbox directory, false if not
define("PQL_ALLOW_ABSOLUTE_PATH", false);

// ----------------------------
// Misc phpQLAdmin controls
// ----------------------------

// PQL_VERIFY_DELETE (true | false)
// Should we verify deletes of user objects?
// If you KNOW exactly what you're doing (like me :),
// you might find all these 'are you really sure' etc
// VERY ANNOYING! :)
define("PQL_VERIFY_DELETE", "true");

// -----------------------------
// mail(message)store generation
// -----------------------------
// user_generate_mailstore (function)
// This function is called to generate the path to the mailbox
// when creating a new user. 
// You may add some code here or just uncomment one of the examples below. 
// Input parameters:
// (object)		ldap		 	-	A LDAP link
// (string)		email			-	local part of the email-address
// (string)		domain			-	domain in which you create the user
// (array)		entry			-	Associative array with all attributes phpQLAdmin is about
//									to add to the new userobject. The index is the attributename.
//
// Returns:	(string) path to the users mailstore
//
// Note: 	If this path is not absolute (w/o trailing slash)
//			it will be prefixed by qmail/LDAP with qmail/control/ldapmessagestore
//
// WARNING:	phpQLAdmin will not check the return-value. Be sure not to return nonsense or
//			a path which is already assigned to another user.

function user_generate_mailstore($ldap, $email, $dn, $entry) {
	$mailstore = '';

	// you feel comfortable with the old way phpQLAdmin generates the mailstore?
	// Uncomment this example and change the string. 
	//
	// supported variables: %d% = domain, %u% = username, %h% = mailhost
	//
	// example: domains baseMailDir/uid
	//	if($dn) {
	//		$mailstore = pql_get_domain_value($ldap, $dn, "basemaildir");
	//		$domain    = pql_get_domain_value($ldap, $dn, "defaultdomain");
	//	} else {
	//		$mailstore = "/var/mail";
	//		$domain    = "$entry";
	//	}
	//
	//	if(! ereg("/$", $mailstore)) {
	//		$mailstore = $mailstore . "/" . "%u%";
	//	} else {
	//		$mailstore = $mailstore . "%u%";
	//	}
	//	$mailstore = pql_complete_constant($mailstore, array("d" => $domain, 
	//														 "u" => $entry[PQL_LDAP_ATTR_UID], 
	//														 "h" => $entry[PQL_LDAP_ATTR_MAILHOST]));
	//
	// example: "%d/%u" (=> domain.tld/username) 
	//	$mailstore = "%d%/%u%"; 
	//	$mailstore = pql_complete_constant($mailstore, array(	"d" => $domain, 
	//															"u" => $entry[PQL_LDAP_ATTR_UID], 
	//															"h" => $entry[PQL_LDAP_ATTR_MAILHOST]));
	// domainname / uid
	// example: domain.tld/username
	//	$mailstore = $domain . '/'. $entry[PQL_LDAP_ATTR_UID]; 					
	//
	// first character of the domainname / domainname / uid
	// example: d/domain.tld/username
	//	$mailstore = substr($domain, 0, 1) . '/' . $domain . '/'. $entry[PQL_LDAP_ATTR_UID]; 					
	//
	// mailhost / domainname / uid
	// example: mail.host.tld/domain.tld/username
	//	$mailstore = $entry[PQL_LDAP_ATTR_MAILHOST] . '/' . $domain . '/'. $entry[PQL_LDAP_ATTR_UID]; 					
	//
	// complete email-address 
	// example: mail@domain.tld
	//	$mailstore = $entry[PQL_LDAP_ATTR_MAIL]; 					
	//
	// generate a random (6 digit) number and make sure 
	// no other user has the same mailstore 
	// This will be slow if you have many users, use some hash
	// instead of random numbers
	// example: 123456
	//
	// seed the random number generator
	//	$seed = list($usec, $sec) = explode(' ', microtime());
	//	$seed = (float) $sec + ((float) $usec * 100000);
	//	mt_srand($seed);
	//	
	//	for(;;) {
	//		// generate a random numer between 100000 and 999999 (6 digits)
	//		$mailstore = mt_rand(100000, 999999);
	//		// check whether another user already has this mailstore. If yes, generate another random number.
	//		// TODO: ldap_basedn isn't availible any more (it's an array of base DN's)!
	//		if (!pql_search_attribute($ldap, $ldap_basedn, PQL_LDAP_ATTR_MAILSTORE, $mailstore)) {
	//			break;
	//		}
	//	}
	//
	//
	// All examples above generate a relative path.
	// If you like to make absolute paths, uncomment this.
	// Prefix the path with  "/home/mailusers/"
	// i.e.: domain.tld/username => /home/mailusers/domain.tld/username
	//	$mailstore = "/home/mailusers/" . $mailstore; 
	//
	// Convert the whole mailstore to lowercase? Uncomment next line. 
	//	$mailstore = strtolower($mailstore);
	//
	// Convert the whole mailstore to uppercase? Uncomment next line. 
	//	$mailstore = strtoupper($mailstore);													

	return($mailstore);
}

// ----------------------------
// home directory generation
// ----------------------------
// See information about function user_generate_mailstore()
// Above. Exact same options apply
function user_generate_homedir($ldap, $email, $dn, $entry) {
	//if($dn) {
	//	$homedir = pql_get_domain_value($ldap, $dn, "basehomedir");
	//	$domain  = pql_get_domain_value($ldap, $dn, "defaultdomain");
	//} else {
	//	$homedir = "/home";
	//	$domain  = "$entry";
	//}
	//
	//if(! ereg("/$", $basemaildir)) {
	//	$homedir = $homedir . "/" . "%u%";
	//} else {
	//	$homedir = $homedir . "%u%";
	//}
	//$homedir = pql_complete_constant($homedir, array("d" => $domain, 
	//												 "u" => $entry[PQL_LDAP_ATTR_UID], 
	//												 "h" => $entry[PQL_LDAP_ATTR_MAILHOST]));
	return($homedir);
}

// ----------------------------
// phpQLAdmin URL
// ----------------------------

// PQL_URI (URL)
// the full url where phpQLAdmin resides
// ie: http://www.yourdomain.com/phpQLAdmin/
define("PQL_URI", "");

// ----------------------------
// UID generation
// ----------------------------
// user_generate_uid (function)
// This function is called to suggest a value for the uid when you add an user.
// You may add some code here or just uncomment one of the examples below. 
// Input parameters:
// (resource)	ldap_linkid 	-	A LDAP link identifier 
// (string)		ldap_basedn 	- 	the dn path to the current qmail-ldap database  
// (string)		surname 		- 	surname  
// (string)		name	 		- 	name
// (string)		email			-	local part of the email-address
// (string)		domain			-	domain in which you create the user
// (string)		account_type	-	Chosen account type; "normal" or "forward"  
//
// Returns: (string) suggested uid; may be changed by the user

function user_generate_uid($ldap_linkid, $ldap_basedn, $surname, $name, $email, $domain, $account_type) {
//	return($email);							// only the local part of the email-address				
//	return($email . '@' . $domain);			// complete email-address
//	return($email . '%' . $domain);			// complete email-address but '%' instead of '@'
//	return($email . '_' . $domain);			// complete email-address but '_' instead of '@'
//	return($surname . $name);				// "Surname Name"
//	return(substr($surname, 0, 1) . $name);	// First character of ther surname + complete name
}

// ----------------------------
// External scripts to execute when creating user/domain
// This script (usually) must be set uid root, so that it can do stuff
// the webserver isn't allowed to do, therefor you can't use a shell script
// (most OS don't allow suid shell scripts).
//
// !!! BIG FAT WARNING: DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING !!!
//define("PQL_EXTRA_SCRIPT_CREATE_USER", "./create_user.pl");
//define("PQL_EXTRA_SCRIPT_CREATE_DOMAIN", "./create_domain.pl");

// ----------------------------
// -- !Don't change values below! --
// It's to automatically set defines depending on values above
if(PQL_LDAP_ATTR_DOMAIN == "dc") {
	$objectclass_domain = "domain";
} else {
	$objectclass_domain = "organizationalUnit";
}

// Better not touch the following line unless you know what's best for you
define("PQL_LDAP_OBJECTCLASS_DOMAIN", strtolower($objectclass_domain) . " dcOrganizationNameForm phpQLAdminBranch");
}
/*
 * Local variables:
 * mode: php
 * tab-width: 4
 * End:
 */
?>
