<?php
// configuration file
// $Id: config.inc.CHANGE_ME,v 2.37 2003-08-15 08:06:17 turbo Exp $
//
// IMPORTANT:
// If adding or removing defines from this file,
// don't forget to change:
//	./phpQLAdmin.schema
//	./include/pql_config.inc
//

// ----------------------------
// PQL_GLOB_HOST (FQDN|IP)
// the host, port and base DN which is running the ldap-server
// for the USERS database - separated with semi colon (;)
//
// Fields:
//	LDAP host		Fully Qualified Hostname
//					or
//					IP address
//					or
//					LDAP URI (ldap://, ldaps://, ldapi:// etc)
//
//	LDAP port		Port number
//					NOTE: Use only if not using LDAP URI
//
//	Control base	Starting point for the LDAP controls information.
//					NOTE: This is NOT the base DN, or a login DN.
//					It's where the QmailLDAP/Controls objects reside!
//
// Note: URI and SSL support were added in PHP v4.0.4.
//
// Stack these with the + (plus) character and you'll get a list of
// host you can administrate. If only one, then you can obiously only
// configure that :)
//
// These two examples works directly with the demo database(s) distributed
// in the demo directory. Don't use on live server, since my account and
// password (quite easily cracked though :) is in there...
//pql_set_define("PQL_GLOB_HOST","ldaps://localhost/;;ou=QmailLDAP,c=SE");
pql_set_define("PQL_GLOB_HOST","localhost;389;ou=QmailLDAP,c=SE");

// ----------------------------
// PQL_GLOB_SUBTREE_USERS
// Is your users organized DIRECTLY under your 'dc' object like
//	uid=username,PQL_CONF_REFERENCE_DOMAINS_WITH=example,<LDAP_BASEDN>
// or in a subtree like
//	uid=username,ou=People,PQL_CONF_REFERENCE_DOMAINS_WITH=example,<LDAP_BASEDN>
// -> If the former (no subtree), leave this empty!
//pql_set_define("PQL_GLOB_SUBTREE_USERS", "ou=People");

// ----------------------------
// PQL_GLOB_SUBTREE_GROUPS
// If you're using your LDAP database for authentication
// etc, you'd need a group for the user as well. Under
// what subtree is the groups located?
// -> Do not add a comma after this, not needed.
//pql_set_define("PQL_GLOB_SUBTREE_GROUPS", "ou=Groups");

// ----------------------------
// PQL_GLOB_EZMLM_USER
// If you're using the ezmlm manager, you might have to configure
// what user ezmlm is running as. That is, who "own's" (ie, the
// directories) the mailinglist. This is usually 'alias', as in
// '~alias/.qmail-LISTNAME' but can also be 'vmail'...
pql_set_define("PQL_GLOB_EZMLM_USER", "alias");

// ----------------------------
// mail(message)store generation
//
// user_generate_mailstore (function)
// This function is called to generate the path to the mailbox
// when creating a new user. 
// You may add some code here or just uncomment one of the examples below. 
// Input parameters:
// (object)		ldap		 	-	A LDAP link
// (string)		email			-	local part of the email-address
// (string)		domain			-	domain in which you create the user
// (array)		entry			-	Associative array with all attributes phpQLAdmin is about
//									to add to the new userobject. The index is the attributename.
//
// Returns:	(string) path to the users mailstore
//
// Note: 	If this path is not absolute (w/o trailing slash)
//			it will be prefixed by qmail/LDAP with qmail/control/ldapmessagestore
//
// WARNING:	phpQLAdmin will not check the return-value. Be sure not to return nonsense or
//			a path which is already assigned to another user.
function user_generate_mailstore($ldap, $email, $dn, $entry) {
	$mailstore = '';
	
	// you feel comfortable with the old way phpQLAdmin generates the mailstore?
	// Uncomment this example and change the string. 
	//
	// supported variables: %d% = domain, %u% = username, %h% = mailhost
	//
	// example: domains baseMailDir/uid
	//	if($dn) {
	//		$mailstore = pql_get_domain_value($ldap, $dn, pql_get_define("PQL_GLOB_ATTR_BASEMAILDIR"));
	//		$domain    = pql_get_domain_value($ldap, $dn, pql_get_define("PQL_GLOB_ATTR_DEFAULTDOMAIN"));
	//	} else {
	//		$mailstore = "/var/mail";
	//		$domain    = "$entry";
	//	}
	//
	//	if(! ereg("/$", $mailstore)) {
	//		$mailstore = $mailstore . "/" . "%u%";
	//	} else {
	//		$mailstore = $mailstore . "%u%";
	//	}
	//	$mailstore = pql_complete_constant($mailstore, array("d" => $domain, 
	//														 "u" => $entry[pql_get_define("PQL_GLOB_ATTR_UID")], 
	//														 "h" => $entry[pql_get_define("PQL_GLOB_ATTR_MAILHOST")]));
	//
	// example: "%d/%u" (=> domain.tld/username) 
	//	$mailstore = "%d%/%u%"; 
	//	$mailstore = pql_complete_constant($mailstore, array(	"d" => $domain, 
	//															"u" => $entry[pql_get_define("PQL_GLOB_ATTR_UID")],
	//															"h" => $entry[pql_get_define("PQL_GLOB_ATTR_MAILHOST")]));
	// domainname / uid
	// example: domain.tld/username
	//	$mailstore = $domain . '/'. $entry[pql_get_define("PQL_GLOB_ATTR_UID")];
	//
	// first character of the domainname / domainname / uid
	// example: d/domain.tld/username
	//	$mailstore = substr($domain, 0, 1) . '/' . $domain . '/'. $entry[pql_get_define("PQL_GLOB_ATTR_UID")];
	//
	// mailhost / domainname / uid
	// example: mail.host.tld/domain.tld/username
	//	$mailstore = $entry[pql_get_define("PQL_GLOB_ATTR_MAILHOST")] . '/' . $domain . '/'. $entry[pql_get_define("PQL_GLOB_ATTR_UID")];
	//
	// complete email-address 
	// example: mail@domain.tld
	//	$mailstore = $entry[pql_get_define("PQL_GLOB_ATTR_MAIL")];
	//
	// generate a random (6 digit) number and make sure 
	// no other user has the same mailstore 
	// This will be slow if you have many users, use some hash
	// instead of random numbers
	// example: 123456
	//
	// seed the random number generator
	//	$seed = list($usec, $sec) = explode(' ', microtime());
	//	$seed = (float) $sec + ((float) $usec * 100000);
	//	mt_srand($seed);
	//	
	//	for(;;) {
	//		// generate a random numer between 100000 and 999999 (6 digits)
	//		$mailstore = mt_rand(100000, 999999);
	//		// check whether another user already has this mailstore. If yes, generate another random number.
	//		// TODO: ldap_basedn isn't availible any more (it's an array of base DN's)!
	//		if (!pql_search_attribute($ldap, $ldap_basedn, pql_get_define("PQL_GLOB_ATTR_MAILSTORE"), $mailstore)) {
	//			break;
	//		}
	//	}
	//
	//
	// All examples above generate a relative path.
	// If you like to make absolute paths, uncomment this.
	// Prefix the path with  "/home/mailusers/"
	// i.e.: domain.tld/username => /home/mailusers/domain.tld/username
	//	$mailstore = "/home/mailusers/" . $mailstore; 
	//
	// Convert the whole mailstore to lowercase? Uncomment next line. 
	//	$mailstore = strtolower($mailstore);
	//
	// Convert the whole mailstore to uppercase? Uncomment next line. 
	//	$mailstore = strtoupper($mailstore);													
	
	return($mailstore);
}

// ----------------------------
// home directory generation
//
// See information about function user_generate_mailstore()
// Above. Exact same options apply
function user_generate_homedir($ldap, $email, $dn, $entry) {
	//if($dn) {
	//	$homedir = pql_get_domain_value($ldap, $dn, pql_get_define("PQL_GLOB_ATTR_BASEHOMEDIR"));
	//	$domain  = pql_get_domain_value($ldap, $dn, pql_get_define("PQL_GLOB_ATTR_DEFAULTDOMAIN"));
	//} else {
	//	$homedir = "/home";
	//	$domain  = "$entry";
	//}
	//
	//if(! ereg("/$", $basemaildir)) {
	//	$homedir = $homedir . "/" . "%u%";
	//} else {
	//	$homedir = $homedir . "%u%";
	//}
	//$homedir = pql_complete_constant($homedir, array("d" => $domain, 
	//												 "u" => $entry[pql_get_define("PQL_GLOB_ATTR_UID")],
	//												 "h" => $entry[pql_get_define("PQL_GLOB_ATTR_MAILHOST")]));
	
	return($homedir);
}

// ----------------------------
// UID generation
//
// user_generate_uid (function)
// This function is called to suggest a value for the uid when you add an user.
// You may add some code here or just uncomment one of the examples below. 
// Input parameters:
// (resource)	ldap		 	-	A LDAP resource identifier 
// (string)		surname 		- 	surname  
// (string)		name	 		- 	name
// (string)		email			-	complete email-address
// (string)		domain			-	branch in which you create the user
// (string)		account_type	-	Chosen account type; "normal" or "forward"  
//
// Returns: (string) suggested uid; may be changed by the user
function user_generate_uid($ldap, $surname, $name, $email, $domain, $account_type) {
	//	return(pql_get_next_username($ldap, $domain));	// Use prefix from branch to generate UID.
	//	return($email);									// Complete email address
	//	return(eregi_replace('@', '%',$email));			// complete email-address but '%' instead of '@'
	//	return(eregi_replace('@', '_',$email));			// complete email-address but '_' instead of '@'
	//	return($surname . $name);						// "Firstname Lastname"
	//	return(substr($surname, 0, 1) . $name);			// First character of ther surname + complete lastname
}

// ----------------------------
// EMAIL generation
//
// user_generate_email (function)
// This function is called to create a value for the email address when
// you add a user. You may add some code here or just uncomment one of the examples below.
// Input parameters:
// (resource)	ldap		 	-	A LDAP resource identifier 
// (string)		surname 		- 	surname  
// (string)		lastname 		- 	lastname
// (string)		domainname		-	A domain name in the form 'domain.tld'
// (string)		domain			-	branch in which you create the user
// (string)		account_type	-	Chosen account type; "normal" or "forward"  
//
// Returns: (string) suggested email address
function user_generate_email($ldap_linkid, $surname, $lastname, $domainname, $domain, $account_type) {
	// Compose the username in the form 'firstname.lastname@domain.tld'.
	return(lc($surname.".".$lastname."@".$domainname));
}

// ----------------------------
// Generate an ACI entry for object
//
// If this function is uncommented, then ACI's will be used!
//
// user_generate_aci (function)
// This function is called to create an list of ACI's that should be added
// to an object as it is created.
// Input parameters:
// (resource)	ldap		 	-	A LDAP resource identifier 
// (string)		user	 		- 	The DN of the user adding/creating the
//									object (or to have the access specified)
// (string)		type			-	Type of object being created. Currently one of:
//									branch	A branch object
//									user	A user object
//									qmail	A QmailLDAP/Controls object
//
// Returns: (array) ACI entry in LDIF format
//
// These are the ACI's that I use in my development system. Might not be
// perfect, but it works for me...
//function user_generate_aci($ldap_linkid, $user, $type) {
//	$i = 0;
//
//	// Public entries
//	$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;r;[entry]#public#"; $i++;
//	$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;r,s,c;objectClass,entry#public#"; $i++;
//	
//	// Non-public entries
//	if($type == 'user') {
//		$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;x;userPassword,krb5PrincipalName#public#"; $i++;
//		$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;r,s,c;uid,cn,accountStatus,uidNumber,gidNumber,gecos,homeDirectory,loginShell#public#"; $i++;
//
//		// 'user'/'self' writable/readable entries
//		$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;r,s,c;sn,givenName,homePostalAddress,mobile,homePhone,labeledURI,mailForwardingAddress,street,physicalDeliveryOfficeName,mailMessageStore,o,l,st,telephoneNumber,postalCode,title#users#"; $i++;
//		$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;r,s,c;sn,givenName,homePostalAddress,mobile,homePhone,labeledURI,mailForwardingAddress,street,physicalDeliveryOfficeName,mailMessageStore,o,l,st,telephoneNumber,postalCode,title#self#"; $i++;
//	} elseif($type == 'qmail') {
//		$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;r,s;[all]#access-id#ENTER_WHOEVER_YOUR_QMAILSERVER_USES"; $i++;
//	}
//
//	// Non-public entries
//	$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;w,r,s,c;[children]#access-id#$user"; $i++;
//	$aci[$i] = "OpenLDAPaci: 1.2.3#entry#grant;w,r,s,c,x;[all]#access-id#$user"; $i++;
//
//	return($aci);
//}

// ----------------------------
// Execute command
//
// This function is here as a wrapper. If you don't want it to actually
// DO anything, it should return a non zero value. If you on the other
// hand wants it to really execute the command, uncomment the line which
// does the execute.
function do_exec($command, $output, &$return) {
//	return(@exec($command, $output, $return));

	$return = 100;
	return(false);
}

/*
 * Local variables:
 * mode: php
 * tab-width: 4
 * End:
 */
?>
